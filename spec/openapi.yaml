openapi: "3.0.0"
info:
  title: Goyotashi
  version: "0.1.0"
  description: "This is the API specification of goyotashi server"
servers:
  - url: http://localhost:8080
    description: Local test server
  - url: https://api.goyotashi.kmconner.net
    description: production server
security:
  - token: [ ]
paths:
  '/community/{id}':
    get:
      summary: Get a community by id
      tags:
        - "Community"
      parameters:
        - schema:
            type: integer
          name: id
          in: path
          required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/community_detail"
      operationId: get-community-by-id
  '/community':
    post:
      summary: Create a new community
      tags:
        - "Community"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCommunityRequest"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/community"
      operationId: new-community
  '/community/{id}/restaurants':
    get:
      summary: List restaurants in a community
      tags:
        - "Restaurant"
      parameters:
        - schema:
            type: integer
          name: id
          in: path
          required: true
        - $ref: "#/components/parameters/pageQuery"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listCommunityRestaurantsResponse"
      operationId: list-community-restaurants
    post:
      summary: Add a restaurant to a community
      tags:
        - "Restaurant"
      parameters:
        - schema:
            type: integer
          name: id
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addRestaurantRequest"
      responses:
        '204':
          description: No Content
      operationId: add-restaurant-to-community
  '/community/{id}/restaurants/{restaurant_id}':
    delete:
      summary: Remove a restrant from the specified community
      tags:
        - Restaurant
      parameters:
        - name: id
          schema:
            type: integer
            format: int64
          required: true
          in: path
        - name: restaurant_id
          schema:
            type: integer
            format: int64
          required: true
          in: path
      responses:
        '204':
          description: No content
        '404':
          description: |
            Not found
            Community or restraunt is not registered, or the list of the specified community does not contain the specified restaurant.
      operationId: remove-restaurant-from-community
  '/community/{id}/restaurants/{restaurant_id}/comments':
    get:
      summary: Get private comments for a restaurant
      tags:
        - "Comment"
      parameters:
        - schema:
            type: integer
          name: id
          in: path
          required: true
        - schema:
            type: integer
          name: restaurant_id
          in: path
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/comment"
        '404':
          description: |
            Not found
            Community or restraunt is not registered, or the list of the specified community does not contain the specified restaurant.
      operationId: get-restaurant-comment
    put:
      summary: Update comment of the restaurant
      tags:
        - "Comment"
      parameters:
        - schema:
            type: integer
          name: id
          in: path
          required: true
        - schema:
            type: integer
          name: restaurant_id
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateCommentRequest"
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/comment"
      operationId: update-restaurant-comment
  '/community/{id}/users':
    get:
      summary: List users in a community
      tags:
        - "Community"
      parameters:
        - schema:
            type: integer
          name: id
          in: path
          required: true
        - $ref: "#/components/parameters/pageQuery"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listCommunityUsersResponse"
        '404':
          description: |
            Not found
      operationId: list-users-of-community
  '/community/search':
    get:
      summary: Search communities using keyword and location
      tags:
        - Community
      parameters:
        - $ref: "#/components/parameters/pageQuery"
        - name: keyword
          schema:
            type: string
          in: query
          required: true
        - name: center_lat
          schema:
            type: number
            format: double
            minimum: -90
            maximum: 90
          in: query
          required: false
        - name: center_lng
          schema:
            type: number
            format: double
            minimum: -180
            maximum: 180
          in: query
          required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/searchCommunityResponse"
      operationId: search-communities
  '/restaurant/search':
    get:
      summary: Search restaurants using keyword and location
      tags:
        - Restaurant
      parameters:
        - $ref: "#/components/parameters/pageQuery"
        - name: keyword
          schema:
            type: string
          in: query
          required: true
        - name: center_lat
          schema:
            type: number
            format: double
            minimum: -90
            maximum: 90
          in: query
          required: false
        - name: center_lng
          schema:
            type: number
            format: double
            minimum: -180
            maximum: 180
          in: query
          required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/searchRestaurantResponse"
      operationId: search-restaurants
  '/restaurant/{id}':
    get:
      summary: Get information about the speicifed restaurant.
      tags:
        - Restaurant
      parameters:
        - name: id
          schema:
            type: integer
            format: int64
          in: path
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/restaurant"
        '404':
          description: Not found
  '/user/{id}/communities':
    get:
      summary: Get communities where the specified user joins
      tags:
        - User
      parameters:
        - name: id
          schema:
            $ref: "#/components/schemas/long"
          in: path
          required: true
        - $ref: "#/components/parameters/pageQuery"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listUserCommunityResponse"
      operationId: list-user-communities
  '/user/{id}/communities/{community_id}':
    delete:
      summary: 'Leave a community'
      tags:
        - User
      parameters:
        - name: id
          schema:
            $ref: "#/components/schemas/long"
          required: true
          in: path
        - name: community_id
          schema:
            $ref: "#/components/schemas/long"
          required: true
          in: path
      responses:
        '204':
          description: |
            No content
            Successfully leaved
        '404':
          description: |
            Not Found
  '/user':
    post:
      summary: Create a new user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createUserResponse"
      operationId: new-user
  '/user/me':
    get:
      tags:
        - User
      summary: Get my profile in detail
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userDetail"
      operationId: get-my-profile
  '/user/me/communities':
    post:
      summary: Join a community
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/joinCommunityRequest"
      responses:
        '204':
          description: NoContent
  '/user/profile':
    post:
      tags:
        - User
      requestBody:
        content:
          'image/jpeg':
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadImageProfileResponse"
      operationId: upload-profile-image
  '/user/{id}/bookmark':
    get:
      summary: Get bookmarking list of the specified user
      tags:
        - Bookmark
      parameters:
        - name: id
          schema:
            $ref: "#/components/schemas/long"
          required: true
          in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/listUserBookmarkResponse"
    post:
      summary: Create a new bookmark
      tags:
        - Bookmark
      parameters:
        - name: id
          schema:
            $ref: "#/components/schemas/long"
          required: true
          in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - community_id
              properties:
                community_id:
                  $ref: "#/components/schemas/long"
      responses:
        '201':
          description: Created
        '404':
          description: User or community not found
        '409':
          description: This community is already bookmarked by the specified user
  '/user/{id}/bookmark/{community_id}':
    delete:
      summary: 'Delete bookmark from the specified user'
      tags:
        - Bookmark
      parameters:
        - name: id
          schema:
            $ref: "#/components/schemas/long"
          required: true
          in: path
        - name: community_id
          schema:
            $ref: "#/components/schemas/long"
          required: true
          in: path
      responses:
        '204':
          description: |
            No content
            The bookmark was deleted successfully
        '404':
          description: |
            Not Found
            Community or restraunt is not registered, or the list of the specified community does not contain the specified restaurant.
components:
  parameters:
    pageQuery:
      name: after
      schema:
        $ref: "#/components/schemas/long"
      in: query
      required: false
  schemas:
    location:
      type: object
      required:
        - lat
        - lng
      properties:
        lat:
          type: number
          format: double
          minimum: -90
          maximum: 90
          description: latitude
        lng:
          type: number
          format: double
          minimum: -180
          maximum: 180
          description: longitude
      example:
        lat: 35.02488258885156
        lng: 135.77692591466467
    community:
      type: object
      description: Goyotashi community
      required:
        - id
        - name
      properties:
        id:
          $ref: "#/components/schemas/long"
        name:
          type: string
        description:
          type: string
        location:
          $ref: "#/components/schemas/location"
    community_detail:
      allOf:
        - $ref: "#/components/schemas/community"
        - type: object
          required:
            - user_count
          properties:
            user_count:
              type: integer
            num_restaurant:
              type: integer
    createCommunityRequest:
      type: object
      required:
        - name
        - location
        - description
      properties:
        name:
          type: string
        description:
          type: string
        location:
          $ref: "#/components/schemas/location"
    restaurant:
      type: object
      description: Restaurant
      required:
        - id
        - name
        - location
      properties:
        id:
          $ref: "#/components/schemas/long"
        name:
          type: string
        location:
          $ref: "#/components/schemas/location"
        image_url:
          type: string
          format: uri
    addRestaurantRequest:
      type: object
      description: Add a restaurant to a community
      required:
        - restaurant_id
      properties:
        restaurant_id:
          $ref: "#/components/schemas/long"
    user:
      type: object
      description: Reperesents user
      required:
        - id
        - name
      properties:
        id:
          $ref: "#/components/schemas/long"
        name:
          type: string
          example: "あたらん"
        profile_image_url:
          type: string
          format: uri
    bookmark:
      type: object
      description: Represents many to many relationsip of bookmark between users and communities
      required:
        - user_id
        - community_id
      properties:
        user_id:
          $ref: "#/components/schemas/long"
        community_id:
          $ref: "#/components/schemas/long"
    affiliation:
      type: object
      description: Represents many to many relationsip of affiliations between users and communities
      required:
        - user_id
        - community_id
      properties:
        user_id:
          $ref: "#/components/schemas/long"
        community_id:
          $ref: "#/components/schemas/long"
    comment:
      type: object
      description: Private comments for a restaurant
      properties:
        community_id:
          $ref: "#/components/schemas/long"
        restaurant_id:
          $ref: "#/components/schemas/long"
        body:
          type: string
        updated_at:
          type: string
          format: date-time
          description: Updated date and time
          example: "2021-01-30T08:30:00Z"
    updateCommentRequest:
      type: object
      description: Update private comments for a restaurant
      properties:
        body:
          type: string
    pageInfo:
      type: object
      properties:
        begin_cursor:
          type: integer
          example: 100
        end_cursor:
          type: integer
          example: 199
        has_previous:
          type: boolean
          example: true
        has_next:
          type: boolean
          example: true
    long:
      type: integer
      format: int64
    authVendor:
      type: string
      enum: [ Google, Apple, Anonymous ]
    authInfo:
      type: object
      required:
        - vendor
        - token
      properties:
        vendor:
          $ref: "#/components/schemas/authVendor"
        token:
          type: string
    createUserRequest:
      type: object
      required:
        - name
        - vendor
      properties:
        name:
          type: string
          example: "あたらん"
        vendor:
          $ref: "#/components/schemas/authVendor"
    userDetail:
      allOf:
        - $ref: "#/components/schemas/user"
        - type: object
          required:
            - community_count
            - bookmark_count
          properties:
            community_count:
              type: integer
            bookmark_count:
              type: integer
    createUserResponse:
      type: object
      required:
        - user
        - auth_info
      properties:
        user:
          $ref: "#/components/schemas/user"
        auth_info:
          $ref: "#/components/schemas/authInfo"
    uploadImageProfileResponse:
      type: object
      required:
        - imageUrl
      properties:
        imageUrl:
          type: string
    listCommunityUsersResponse:
      allOf:
        - $ref: "#/components/schemas/user"
        - type: object
          properties:
            users:
              type: array
              items:
                $ref: "#/components/schemas/user"
    searchCommunityResponse:
      allOf:
        - $ref: "#/components/schemas/pageInfo"
        - type: object
          properties:
            communities:
              type: array
              items:
                $ref: "#/components/schemas/community"
    listUserCommunityResponse:
      allOf:
        - type: object
          properties:
            communities:
              type: array
              items:
                $ref: '#/components/schemas/community'
        - $ref: '#/components/schemas/pageInfo'
    listCommunityRestaurantsResponse:
      allOf:
        - $ref: "#/components/schemas/pageInfo"
        - type: object
          properties:
            restaurants:
              type: array
              items:
                $ref: "#/components/schemas/restaurant"
    searchRestaurantResponse:
      allOf:
        - $ref: "#/components/schemas/pageInfo"
        - type: object
          properties:
            restaurants:
              type: array
              items:
                $ref: "#/components/schemas/restaurant"
    listUserBookmarkResponse:
      allOf:
        - $ref: "#/components/schemas/pageInfo"
        - type: object
          properties:
            communities:
              type: array
              items:
                $ref: "#/components/schemas/community"
    joinCommunityRequest:
      type: object
      required:
        - community_id
      properties:
        community_id:
          $ref: "#/components/schemas/long"
  securitySchemes:
    token:
      type: apiKey
      in: header
      name: Authorization
