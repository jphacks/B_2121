name: Lint, Test, Build and Deploy
on:
  push:

jobs:
  lint:
    name: Lint files
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.42.1
  test:
    name: Run Unit Tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Cache packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-gomod-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gomod-${{ hashFiles('go.sum') }}
            ${{ runner.os }}-gomod-
      - name: Get dependencies
        run: go mod download -x
      - name: Build
        run: go build .
      - name: Run tests
        run: go test -v ./...
  docker:
    name: Build & push docker image
#    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    needs:
      - lint
      - test
    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: kmconner/goyotashi:latest
  mysql:
    name: Build & push MySQL image
#    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: kmconner/goyotashi-mysql:latest
          context: ./mysql/
  deploy:
    name: Deploy to server
    runs-on: ubuntu-20.04
    needs:
      - docker
      - mysql
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SERVER_SSH_KEY }}
          name: id_ed25519
          known_hosts: ${{ secrets.SERVER_KNOWN_HOSTS }}
      - name: Setup docker context
        run: |
          docker context create --default-stack-orchestrator=swarm --docker "host=ssh://${{ secrets.SERVER_SSH_USER }}@${{ secrets.SERVER_SSH_HOST }}:${{ secrets.SERVER_SSH_PORT }}" prod
          docker context use prod
      - name: Check out
        uses: actions/checkout@v2.3.5
      - name: Deploy
        run: |
          docker-compose -f docker-compose.prod.yaml pull
          docker-compose -f docker-compose.prod.yaml up --force-recreate -d
        env:
          DB_USER: ${{ secrets.MYSQL_USER }}
          DB_PASSWORD: ${{ secrets.MYSQL_PASS }}
      - name: Notify to Slack
        uses: craftech-io/slack-action@v1
        with:
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
