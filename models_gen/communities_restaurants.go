// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_gen

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CommunitiesRestaurant is an object representing the database table.
type CommunitiesRestaurant struct {
	ID           int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CommunityID  int64     `boil:"community_id" json:"community_id" toml:"community_id" yaml:"community_id"`
	RestaurantID int64     `boil:"restaurant_id" json:"restaurant_id" toml:"restaurant_id" yaml:"restaurant_id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *communitiesRestaurantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L communitiesRestaurantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommunitiesRestaurantColumns = struct {
	ID           string
	CommunityID  string
	RestaurantID string
	CreatedAt    string
}{
	ID:           "id",
	CommunityID:  "community_id",
	RestaurantID: "restaurant_id",
	CreatedAt:    "created_at",
}

var CommunitiesRestaurantTableColumns = struct {
	ID           string
	CommunityID  string
	RestaurantID string
	CreatedAt    string
}{
	ID:           "communities_restaurants.id",
	CommunityID:  "communities_restaurants.community_id",
	RestaurantID: "communities_restaurants.restaurant_id",
	CreatedAt:    "communities_restaurants.created_at",
}

// Generated where

var CommunitiesRestaurantWhere = struct {
	ID           whereHelperint64
	CommunityID  whereHelperint64
	RestaurantID whereHelperint64
	CreatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint64{field: "`communities_restaurants`.`id`"},
	CommunityID:  whereHelperint64{field: "`communities_restaurants`.`community_id`"},
	RestaurantID: whereHelperint64{field: "`communities_restaurants`.`restaurant_id`"},
	CreatedAt:    whereHelpertime_Time{field: "`communities_restaurants`.`created_at`"},
}

// CommunitiesRestaurantRels is where relationship names are stored.
var CommunitiesRestaurantRels = struct {
	Community  string
	Restaurant string
}{
	Community:  "Community",
	Restaurant: "Restaurant",
}

// communitiesRestaurantR is where relationships are stored.
type communitiesRestaurantR struct {
	Community  *Community  `boil:"Community" json:"Community" toml:"Community" yaml:"Community"`
	Restaurant *Restaurant `boil:"Restaurant" json:"Restaurant" toml:"Restaurant" yaml:"Restaurant"`
}

// NewStruct creates a new relationship struct
func (*communitiesRestaurantR) NewStruct() *communitiesRestaurantR {
	return &communitiesRestaurantR{}
}

// communitiesRestaurantL is where Load methods for each relationship are stored.
type communitiesRestaurantL struct{}

var (
	communitiesRestaurantAllColumns            = []string{"id", "community_id", "restaurant_id", "created_at"}
	communitiesRestaurantColumnsWithoutDefault = []string{"community_id", "restaurant_id"}
	communitiesRestaurantColumnsWithDefault    = []string{"id", "created_at"}
	communitiesRestaurantPrimaryKeyColumns     = []string{"id"}
)

type (
	// CommunitiesRestaurantSlice is an alias for a slice of pointers to CommunitiesRestaurant.
	// This should almost always be used instead of []CommunitiesRestaurant.
	CommunitiesRestaurantSlice []*CommunitiesRestaurant
	// CommunitiesRestaurantHook is the signature for custom CommunitiesRestaurant hook methods
	CommunitiesRestaurantHook func(context.Context, boil.ContextExecutor, *CommunitiesRestaurant) error

	communitiesRestaurantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	communitiesRestaurantType                 = reflect.TypeOf(&CommunitiesRestaurant{})
	communitiesRestaurantMapping              = queries.MakeStructMapping(communitiesRestaurantType)
	communitiesRestaurantPrimaryKeyMapping, _ = queries.BindMapping(communitiesRestaurantType, communitiesRestaurantMapping, communitiesRestaurantPrimaryKeyColumns)
	communitiesRestaurantInsertCacheMut       sync.RWMutex
	communitiesRestaurantInsertCache          = make(map[string]insertCache)
	communitiesRestaurantUpdateCacheMut       sync.RWMutex
	communitiesRestaurantUpdateCache          = make(map[string]updateCache)
	communitiesRestaurantUpsertCacheMut       sync.RWMutex
	communitiesRestaurantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var communitiesRestaurantBeforeInsertHooks []CommunitiesRestaurantHook
var communitiesRestaurantBeforeUpdateHooks []CommunitiesRestaurantHook
var communitiesRestaurantBeforeDeleteHooks []CommunitiesRestaurantHook
var communitiesRestaurantBeforeUpsertHooks []CommunitiesRestaurantHook

var communitiesRestaurantAfterInsertHooks []CommunitiesRestaurantHook
var communitiesRestaurantAfterSelectHooks []CommunitiesRestaurantHook
var communitiesRestaurantAfterUpdateHooks []CommunitiesRestaurantHook
var communitiesRestaurantAfterDeleteHooks []CommunitiesRestaurantHook
var communitiesRestaurantAfterUpsertHooks []CommunitiesRestaurantHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CommunitiesRestaurant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communitiesRestaurantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CommunitiesRestaurant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communitiesRestaurantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CommunitiesRestaurant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communitiesRestaurantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CommunitiesRestaurant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communitiesRestaurantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CommunitiesRestaurant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communitiesRestaurantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CommunitiesRestaurant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communitiesRestaurantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CommunitiesRestaurant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communitiesRestaurantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CommunitiesRestaurant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communitiesRestaurantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CommunitiesRestaurant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communitiesRestaurantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCommunitiesRestaurantHook registers your hook function for all future operations.
func AddCommunitiesRestaurantHook(hookPoint boil.HookPoint, communitiesRestaurantHook CommunitiesRestaurantHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		communitiesRestaurantBeforeInsertHooks = append(communitiesRestaurantBeforeInsertHooks, communitiesRestaurantHook)
	case boil.BeforeUpdateHook:
		communitiesRestaurantBeforeUpdateHooks = append(communitiesRestaurantBeforeUpdateHooks, communitiesRestaurantHook)
	case boil.BeforeDeleteHook:
		communitiesRestaurantBeforeDeleteHooks = append(communitiesRestaurantBeforeDeleteHooks, communitiesRestaurantHook)
	case boil.BeforeUpsertHook:
		communitiesRestaurantBeforeUpsertHooks = append(communitiesRestaurantBeforeUpsertHooks, communitiesRestaurantHook)
	case boil.AfterInsertHook:
		communitiesRestaurantAfterInsertHooks = append(communitiesRestaurantAfterInsertHooks, communitiesRestaurantHook)
	case boil.AfterSelectHook:
		communitiesRestaurantAfterSelectHooks = append(communitiesRestaurantAfterSelectHooks, communitiesRestaurantHook)
	case boil.AfterUpdateHook:
		communitiesRestaurantAfterUpdateHooks = append(communitiesRestaurantAfterUpdateHooks, communitiesRestaurantHook)
	case boil.AfterDeleteHook:
		communitiesRestaurantAfterDeleteHooks = append(communitiesRestaurantAfterDeleteHooks, communitiesRestaurantHook)
	case boil.AfterUpsertHook:
		communitiesRestaurantAfterUpsertHooks = append(communitiesRestaurantAfterUpsertHooks, communitiesRestaurantHook)
	}
}

// One returns a single communitiesRestaurant record from the query.
func (q communitiesRestaurantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CommunitiesRestaurant, error) {
	o := &CommunitiesRestaurant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_gen: failed to execute a one query for communities_restaurants")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CommunitiesRestaurant records from the query.
func (q communitiesRestaurantQuery) All(ctx context.Context, exec boil.ContextExecutor) (CommunitiesRestaurantSlice, error) {
	var o []*CommunitiesRestaurant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_gen: failed to assign all query results to CommunitiesRestaurant slice")
	}

	if len(communitiesRestaurantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CommunitiesRestaurant records in the query.
func (q communitiesRestaurantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to count communities_restaurants rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q communitiesRestaurantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_gen: failed to check if communities_restaurants exists")
	}

	return count > 0, nil
}

// Community pointed to by the foreign key.
func (o *CommunitiesRestaurant) Community(mods ...qm.QueryMod) communityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CommunityID),
	}

	queryMods = append(queryMods, mods...)

	query := Communities(queryMods...)
	queries.SetFrom(query.Query, "`communities`")

	return query
}

// Restaurant pointed to by the foreign key.
func (o *CommunitiesRestaurant) Restaurant(mods ...qm.QueryMod) restaurantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.RestaurantID),
	}

	queryMods = append(queryMods, mods...)

	query := Restaurants(queryMods...)
	queries.SetFrom(query.Query, "`restaurants`")

	return query
}

// LoadCommunity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (communitiesRestaurantL) LoadCommunity(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommunitiesRestaurant interface{}, mods queries.Applicator) error {
	var slice []*CommunitiesRestaurant
	var object *CommunitiesRestaurant

	if singular {
		object = maybeCommunitiesRestaurant.(*CommunitiesRestaurant)
	} else {
		slice = *maybeCommunitiesRestaurant.(*[]*CommunitiesRestaurant)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &communitiesRestaurantR{}
		}
		args = append(args, object.CommunityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &communitiesRestaurantR{}
			}

			for _, a := range args {
				if a == obj.CommunityID {
					continue Outer
				}
			}

			args = append(args, obj.CommunityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`communities`),
		qm.WhereIn(`communities.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Community")
	}

	var resultSlice []*Community
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Community")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for communities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for communities")
	}

	if len(communitiesRestaurantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Community = foreign
		if foreign.R == nil {
			foreign.R = &communityR{}
		}
		foreign.R.CommunitiesRestaurants = append(foreign.R.CommunitiesRestaurants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CommunityID == foreign.ID {
				local.R.Community = foreign
				if foreign.R == nil {
					foreign.R = &communityR{}
				}
				foreign.R.CommunitiesRestaurants = append(foreign.R.CommunitiesRestaurants, local)
				break
			}
		}
	}

	return nil
}

// LoadRestaurant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (communitiesRestaurantL) LoadRestaurant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommunitiesRestaurant interface{}, mods queries.Applicator) error {
	var slice []*CommunitiesRestaurant
	var object *CommunitiesRestaurant

	if singular {
		object = maybeCommunitiesRestaurant.(*CommunitiesRestaurant)
	} else {
		slice = *maybeCommunitiesRestaurant.(*[]*CommunitiesRestaurant)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &communitiesRestaurantR{}
		}
		args = append(args, object.RestaurantID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &communitiesRestaurantR{}
			}

			for _, a := range args {
				if a == obj.RestaurantID {
					continue Outer
				}
			}

			args = append(args, obj.RestaurantID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`restaurants`),
		qm.WhereIn(`restaurants.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Restaurant")
	}

	var resultSlice []*Restaurant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Restaurant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for restaurants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for restaurants")
	}

	if len(communitiesRestaurantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Restaurant = foreign
		if foreign.R == nil {
			foreign.R = &restaurantR{}
		}
		foreign.R.CommunitiesRestaurants = append(foreign.R.CommunitiesRestaurants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RestaurantID == foreign.ID {
				local.R.Restaurant = foreign
				if foreign.R == nil {
					foreign.R = &restaurantR{}
				}
				foreign.R.CommunitiesRestaurants = append(foreign.R.CommunitiesRestaurants, local)
				break
			}
		}
	}

	return nil
}

// SetCommunity of the communitiesRestaurant to the related item.
// Sets o.R.Community to related.
// Adds o to related.R.CommunitiesRestaurants.
func (o *CommunitiesRestaurant) SetCommunity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Community) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `communities_restaurants` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"community_id"}),
		strmangle.WhereClause("`", "`", 0, communitiesRestaurantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CommunityID = related.ID
	if o.R == nil {
		o.R = &communitiesRestaurantR{
			Community: related,
		}
	} else {
		o.R.Community = related
	}

	if related.R == nil {
		related.R = &communityR{
			CommunitiesRestaurants: CommunitiesRestaurantSlice{o},
		}
	} else {
		related.R.CommunitiesRestaurants = append(related.R.CommunitiesRestaurants, o)
	}

	return nil
}

// SetRestaurant of the communitiesRestaurant to the related item.
// Sets o.R.Restaurant to related.
// Adds o to related.R.CommunitiesRestaurants.
func (o *CommunitiesRestaurant) SetRestaurant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Restaurant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `communities_restaurants` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"restaurant_id"}),
		strmangle.WhereClause("`", "`", 0, communitiesRestaurantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RestaurantID = related.ID
	if o.R == nil {
		o.R = &communitiesRestaurantR{
			Restaurant: related,
		}
	} else {
		o.R.Restaurant = related
	}

	if related.R == nil {
		related.R = &restaurantR{
			CommunitiesRestaurants: CommunitiesRestaurantSlice{o},
		}
	} else {
		related.R.CommunitiesRestaurants = append(related.R.CommunitiesRestaurants, o)
	}

	return nil
}

// CommunitiesRestaurants retrieves all the records using an executor.
func CommunitiesRestaurants(mods ...qm.QueryMod) communitiesRestaurantQuery {
	mods = append(mods, qm.From("`communities_restaurants`"))
	return communitiesRestaurantQuery{NewQuery(mods...)}
}

// FindCommunitiesRestaurant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommunitiesRestaurant(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CommunitiesRestaurant, error) {
	communitiesRestaurantObj := &CommunitiesRestaurant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `communities_restaurants` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, communitiesRestaurantObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_gen: unable to select from communities_restaurants")
	}

	if err = communitiesRestaurantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return communitiesRestaurantObj, err
	}

	return communitiesRestaurantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CommunitiesRestaurant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_gen: no communities_restaurants provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(communitiesRestaurantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	communitiesRestaurantInsertCacheMut.RLock()
	cache, cached := communitiesRestaurantInsertCache[key]
	communitiesRestaurantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			communitiesRestaurantAllColumns,
			communitiesRestaurantColumnsWithDefault,
			communitiesRestaurantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(communitiesRestaurantType, communitiesRestaurantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(communitiesRestaurantType, communitiesRestaurantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `communities_restaurants` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `communities_restaurants` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `communities_restaurants` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, communitiesRestaurantPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models_gen: unable to insert into communities_restaurants")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == communitiesRestaurantMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to populate default values for communities_restaurants")
	}

CacheNoHooks:
	if !cached {
		communitiesRestaurantInsertCacheMut.Lock()
		communitiesRestaurantInsertCache[key] = cache
		communitiesRestaurantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CommunitiesRestaurant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CommunitiesRestaurant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	communitiesRestaurantUpdateCacheMut.RLock()
	cache, cached := communitiesRestaurantUpdateCache[key]
	communitiesRestaurantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			communitiesRestaurantAllColumns,
			communitiesRestaurantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_gen: unable to update communities_restaurants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `communities_restaurants` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, communitiesRestaurantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(communitiesRestaurantType, communitiesRestaurantMapping, append(wl, communitiesRestaurantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to update communities_restaurants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by update for communities_restaurants")
	}

	if !cached {
		communitiesRestaurantUpdateCacheMut.Lock()
		communitiesRestaurantUpdateCache[key] = cache
		communitiesRestaurantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q communitiesRestaurantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to update all for communities_restaurants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to retrieve rows affected for communities_restaurants")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommunitiesRestaurantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_gen: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), communitiesRestaurantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `communities_restaurants` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, communitiesRestaurantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to update all in communitiesRestaurant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to retrieve rows affected all in update all communitiesRestaurant")
	}
	return rowsAff, nil
}

var mySQLCommunitiesRestaurantUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CommunitiesRestaurant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models_gen: no communities_restaurants provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(communitiesRestaurantColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCommunitiesRestaurantUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	communitiesRestaurantUpsertCacheMut.RLock()
	cache, cached := communitiesRestaurantUpsertCache[key]
	communitiesRestaurantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			communitiesRestaurantAllColumns,
			communitiesRestaurantColumnsWithDefault,
			communitiesRestaurantColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			communitiesRestaurantAllColumns,
			communitiesRestaurantPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models_gen: unable to upsert communities_restaurants, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`communities_restaurants`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `communities_restaurants` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(communitiesRestaurantType, communitiesRestaurantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(communitiesRestaurantType, communitiesRestaurantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models_gen: unable to upsert for communities_restaurants")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == communitiesRestaurantMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(communitiesRestaurantType, communitiesRestaurantMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to retrieve unique values for communities_restaurants")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to populate default values for communities_restaurants")
	}

CacheNoHooks:
	if !cached {
		communitiesRestaurantUpsertCacheMut.Lock()
		communitiesRestaurantUpsertCache[key] = cache
		communitiesRestaurantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CommunitiesRestaurant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommunitiesRestaurant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_gen: no CommunitiesRestaurant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), communitiesRestaurantPrimaryKeyMapping)
	sql := "DELETE FROM `communities_restaurants` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to delete from communities_restaurants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by delete for communities_restaurants")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q communitiesRestaurantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_gen: no communitiesRestaurantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to delete all from communities_restaurants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by deleteall for communities_restaurants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommunitiesRestaurantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(communitiesRestaurantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), communitiesRestaurantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `communities_restaurants` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, communitiesRestaurantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to delete all from communitiesRestaurant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by deleteall for communities_restaurants")
	}

	if len(communitiesRestaurantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommunitiesRestaurant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCommunitiesRestaurant(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommunitiesRestaurantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommunitiesRestaurantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), communitiesRestaurantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `communities_restaurants`.* FROM `communities_restaurants` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, communitiesRestaurantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to reload all in CommunitiesRestaurantSlice")
	}

	*o = slice

	return nil
}

// CommunitiesRestaurantExists checks if the CommunitiesRestaurant row exists.
func CommunitiesRestaurantExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `communities_restaurants` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_gen: unable to check if communities_restaurants exists")
	}

	return exists, nil
}
