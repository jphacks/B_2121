// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_gen

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Affiliation is an object representing the database table.
type Affiliation struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CommunityID int64     `boil:"community_id" json:"community_id" toml:"community_id" yaml:"community_id"`
	UserID      int64     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *affiliationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L affiliationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AffiliationColumns = struct {
	ID          string
	CommunityID string
	UserID      string
	CreatedAt   string
}{
	ID:          "id",
	CommunityID: "community_id",
	UserID:      "user_id",
	CreatedAt:   "created_at",
}

var AffiliationTableColumns = struct {
	ID          string
	CommunityID string
	UserID      string
	CreatedAt   string
}{
	ID:          "affiliation.id",
	CommunityID: "affiliation.community_id",
	UserID:      "affiliation.user_id",
	CreatedAt:   "affiliation.created_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AffiliationWhere = struct {
	ID          whereHelperint64
	CommunityID whereHelperint64
	UserID      whereHelperint64
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "`affiliation`.`id`"},
	CommunityID: whereHelperint64{field: "`affiliation`.`community_id`"},
	UserID:      whereHelperint64{field: "`affiliation`.`user_id`"},
	CreatedAt:   whereHelpertime_Time{field: "`affiliation`.`created_at`"},
}

// AffiliationRels is where relationship names are stored.
var AffiliationRels = struct {
	Community string
	User      string
}{
	Community: "Community",
	User:      "User",
}

// affiliationR is where relationships are stored.
type affiliationR struct {
	Community *Community `boil:"Community" json:"Community" toml:"Community" yaml:"Community"`
	User      *User      `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*affiliationR) NewStruct() *affiliationR {
	return &affiliationR{}
}

// affiliationL is where Load methods for each relationship are stored.
type affiliationL struct{}

var (
	affiliationAllColumns            = []string{"id", "community_id", "user_id", "created_at"}
	affiliationColumnsWithoutDefault = []string{"community_id", "user_id"}
	affiliationColumnsWithDefault    = []string{"id", "created_at"}
	affiliationPrimaryKeyColumns     = []string{"id"}
)

type (
	// AffiliationSlice is an alias for a slice of pointers to Affiliation.
	// This should almost always be used instead of []Affiliation.
	AffiliationSlice []*Affiliation
	// AffiliationHook is the signature for custom Affiliation hook methods
	AffiliationHook func(context.Context, boil.ContextExecutor, *Affiliation) error

	affiliationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	affiliationType                 = reflect.TypeOf(&Affiliation{})
	affiliationMapping              = queries.MakeStructMapping(affiliationType)
	affiliationPrimaryKeyMapping, _ = queries.BindMapping(affiliationType, affiliationMapping, affiliationPrimaryKeyColumns)
	affiliationInsertCacheMut       sync.RWMutex
	affiliationInsertCache          = make(map[string]insertCache)
	affiliationUpdateCacheMut       sync.RWMutex
	affiliationUpdateCache          = make(map[string]updateCache)
	affiliationUpsertCacheMut       sync.RWMutex
	affiliationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var affiliationBeforeInsertHooks []AffiliationHook
var affiliationBeforeUpdateHooks []AffiliationHook
var affiliationBeforeDeleteHooks []AffiliationHook
var affiliationBeforeUpsertHooks []AffiliationHook

var affiliationAfterInsertHooks []AffiliationHook
var affiliationAfterSelectHooks []AffiliationHook
var affiliationAfterUpdateHooks []AffiliationHook
var affiliationAfterDeleteHooks []AffiliationHook
var affiliationAfterUpsertHooks []AffiliationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Affiliation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range affiliationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Affiliation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range affiliationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Affiliation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range affiliationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Affiliation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range affiliationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Affiliation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range affiliationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Affiliation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range affiliationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Affiliation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range affiliationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Affiliation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range affiliationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Affiliation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range affiliationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAffiliationHook registers your hook function for all future operations.
func AddAffiliationHook(hookPoint boil.HookPoint, affiliationHook AffiliationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		affiliationBeforeInsertHooks = append(affiliationBeforeInsertHooks, affiliationHook)
	case boil.BeforeUpdateHook:
		affiliationBeforeUpdateHooks = append(affiliationBeforeUpdateHooks, affiliationHook)
	case boil.BeforeDeleteHook:
		affiliationBeforeDeleteHooks = append(affiliationBeforeDeleteHooks, affiliationHook)
	case boil.BeforeUpsertHook:
		affiliationBeforeUpsertHooks = append(affiliationBeforeUpsertHooks, affiliationHook)
	case boil.AfterInsertHook:
		affiliationAfterInsertHooks = append(affiliationAfterInsertHooks, affiliationHook)
	case boil.AfterSelectHook:
		affiliationAfterSelectHooks = append(affiliationAfterSelectHooks, affiliationHook)
	case boil.AfterUpdateHook:
		affiliationAfterUpdateHooks = append(affiliationAfterUpdateHooks, affiliationHook)
	case boil.AfterDeleteHook:
		affiliationAfterDeleteHooks = append(affiliationAfterDeleteHooks, affiliationHook)
	case boil.AfterUpsertHook:
		affiliationAfterUpsertHooks = append(affiliationAfterUpsertHooks, affiliationHook)
	}
}

// One returns a single affiliation record from the query.
func (q affiliationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Affiliation, error) {
	o := &Affiliation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_gen: failed to execute a one query for affiliation")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Affiliation records from the query.
func (q affiliationQuery) All(ctx context.Context, exec boil.ContextExecutor) (AffiliationSlice, error) {
	var o []*Affiliation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_gen: failed to assign all query results to Affiliation slice")
	}

	if len(affiliationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Affiliation records in the query.
func (q affiliationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to count affiliation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q affiliationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_gen: failed to check if affiliation exists")
	}

	return count > 0, nil
}

// Community pointed to by the foreign key.
func (o *Affiliation) Community(mods ...qm.QueryMod) communityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CommunityID),
	}

	queryMods = append(queryMods, mods...)

	query := Communities(queryMods...)
	queries.SetFrom(query.Query, "`communities`")

	return query
}

// User pointed to by the foreign key.
func (o *Affiliation) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// LoadCommunity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (affiliationL) LoadCommunity(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAffiliation interface{}, mods queries.Applicator) error {
	var slice []*Affiliation
	var object *Affiliation

	if singular {
		object = maybeAffiliation.(*Affiliation)
	} else {
		slice = *maybeAffiliation.(*[]*Affiliation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &affiliationR{}
		}
		args = append(args, object.CommunityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &affiliationR{}
			}

			for _, a := range args {
				if a == obj.CommunityID {
					continue Outer
				}
			}

			args = append(args, obj.CommunityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`communities`),
		qm.WhereIn(`communities.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Community")
	}

	var resultSlice []*Community
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Community")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for communities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for communities")
	}

	if len(affiliationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Community = foreign
		if foreign.R == nil {
			foreign.R = &communityR{}
		}
		foreign.R.Affiliations = append(foreign.R.Affiliations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CommunityID == foreign.ID {
				local.R.Community = foreign
				if foreign.R == nil {
					foreign.R = &communityR{}
				}
				foreign.R.Affiliations = append(foreign.R.Affiliations, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (affiliationL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAffiliation interface{}, mods queries.Applicator) error {
	var slice []*Affiliation
	var object *Affiliation

	if singular {
		object = maybeAffiliation.(*Affiliation)
	} else {
		slice = *maybeAffiliation.(*[]*Affiliation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &affiliationR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &affiliationR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(affiliationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Affiliations = append(foreign.R.Affiliations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Affiliations = append(foreign.R.Affiliations, local)
				break
			}
		}
	}

	return nil
}

// SetCommunity of the affiliation to the related item.
// Sets o.R.Community to related.
// Adds o to related.R.Affiliations.
func (o *Affiliation) SetCommunity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Community) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `affiliation` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"community_id"}),
		strmangle.WhereClause("`", "`", 0, affiliationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CommunityID = related.ID
	if o.R == nil {
		o.R = &affiliationR{
			Community: related,
		}
	} else {
		o.R.Community = related
	}

	if related.R == nil {
		related.R = &communityR{
			Affiliations: AffiliationSlice{o},
		}
	} else {
		related.R.Affiliations = append(related.R.Affiliations, o)
	}

	return nil
}

// SetUser of the affiliation to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Affiliations.
func (o *Affiliation) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `affiliation` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, affiliationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &affiliationR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Affiliations: AffiliationSlice{o},
		}
	} else {
		related.R.Affiliations = append(related.R.Affiliations, o)
	}

	return nil
}

// Affiliations retrieves all the records using an executor.
func Affiliations(mods ...qm.QueryMod) affiliationQuery {
	mods = append(mods, qm.From("`affiliation`"))
	return affiliationQuery{NewQuery(mods...)}
}

// FindAffiliation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAffiliation(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Affiliation, error) {
	affiliationObj := &Affiliation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `affiliation` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, affiliationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_gen: unable to select from affiliation")
	}

	if err = affiliationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return affiliationObj, err
	}

	return affiliationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Affiliation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_gen: no affiliation provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(affiliationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	affiliationInsertCacheMut.RLock()
	cache, cached := affiliationInsertCache[key]
	affiliationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			affiliationAllColumns,
			affiliationColumnsWithDefault,
			affiliationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(affiliationType, affiliationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(affiliationType, affiliationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `affiliation` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `affiliation` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `affiliation` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, affiliationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models_gen: unable to insert into affiliation")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == affiliationMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to populate default values for affiliation")
	}

CacheNoHooks:
	if !cached {
		affiliationInsertCacheMut.Lock()
		affiliationInsertCache[key] = cache
		affiliationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Affiliation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Affiliation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	affiliationUpdateCacheMut.RLock()
	cache, cached := affiliationUpdateCache[key]
	affiliationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			affiliationAllColumns,
			affiliationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_gen: unable to update affiliation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `affiliation` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, affiliationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(affiliationType, affiliationMapping, append(wl, affiliationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to update affiliation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by update for affiliation")
	}

	if !cached {
		affiliationUpdateCacheMut.Lock()
		affiliationUpdateCache[key] = cache
		affiliationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q affiliationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to update all for affiliation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to retrieve rows affected for affiliation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AffiliationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_gen: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), affiliationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `affiliation` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, affiliationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to update all in affiliation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to retrieve rows affected all in update all affiliation")
	}
	return rowsAff, nil
}

var mySQLAffiliationUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Affiliation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models_gen: no affiliation provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(affiliationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAffiliationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	affiliationUpsertCacheMut.RLock()
	cache, cached := affiliationUpsertCache[key]
	affiliationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			affiliationAllColumns,
			affiliationColumnsWithDefault,
			affiliationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			affiliationAllColumns,
			affiliationPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models_gen: unable to upsert affiliation, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`affiliation`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `affiliation` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(affiliationType, affiliationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(affiliationType, affiliationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models_gen: unable to upsert for affiliation")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == affiliationMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(affiliationType, affiliationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to retrieve unique values for affiliation")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to populate default values for affiliation")
	}

CacheNoHooks:
	if !cached {
		affiliationUpsertCacheMut.Lock()
		affiliationUpsertCache[key] = cache
		affiliationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Affiliation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Affiliation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_gen: no Affiliation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), affiliationPrimaryKeyMapping)
	sql := "DELETE FROM `affiliation` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to delete from affiliation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by delete for affiliation")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q affiliationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_gen: no affiliationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to delete all from affiliation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by deleteall for affiliation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AffiliationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(affiliationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), affiliationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `affiliation` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, affiliationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to delete all from affiliation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by deleteall for affiliation")
	}

	if len(affiliationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Affiliation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAffiliation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AffiliationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AffiliationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), affiliationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `affiliation`.* FROM `affiliation` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, affiliationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to reload all in AffiliationSlice")
	}

	*o = slice

	return nil
}

// AffiliationExists checks if the Affiliation row exists.
func AffiliationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `affiliation` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_gen: unable to check if affiliation exists")
	}

	return exists, nil
}
