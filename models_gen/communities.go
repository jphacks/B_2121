// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_gen

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Community is an object representing the database table.
type Community struct {
	ID          int64        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string       `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description string       `boil:"description" json:"description" toml:"description" yaml:"description"`
	Latitude    null.Float64 `boil:"latitude" json:"latitude,omitempty" toml:"latitude" yaml:"latitude,omitempty"`
	Longitude   null.Float64 `boil:"longitude" json:"longitude,omitempty" toml:"longitude" yaml:"longitude,omitempty"`
	// 画像のファイル名
	ImageFile string    `boil:"image_file" json:"image_file" toml:"image_file" yaml:"image_file"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *communityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L communityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommunityColumns = struct {
	ID          string
	Name        string
	Description string
	Latitude    string
	Longitude   string
	ImageFile   string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	Name:        "name",
	Description: "description",
	Latitude:    "latitude",
	Longitude:   "longitude",
	ImageFile:   "image_file",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var CommunityTableColumns = struct {
	ID          string
	Name        string
	Description string
	Latitude    string
	Longitude   string
	ImageFile   string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "communities.id",
	Name:        "communities.name",
	Description: "communities.description",
	Latitude:    "communities.latitude",
	Longitude:   "communities.longitude",
	ImageFile:   "communities.image_file",
	CreatedAt:   "communities.created_at",
	UpdatedAt:   "communities.updated_at",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CommunityWhere = struct {
	ID          whereHelperint64
	Name        whereHelperstring
	Description whereHelperstring
	Latitude    whereHelpernull_Float64
	Longitude   whereHelpernull_Float64
	ImageFile   whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "`communities`.`id`"},
	Name:        whereHelperstring{field: "`communities`.`name`"},
	Description: whereHelperstring{field: "`communities`.`description`"},
	Latitude:    whereHelpernull_Float64{field: "`communities`.`latitude`"},
	Longitude:   whereHelpernull_Float64{field: "`communities`.`longitude`"},
	ImageFile:   whereHelperstring{field: "`communities`.`image_file`"},
	CreatedAt:   whereHelpertime_Time{field: "`communities`.`created_at`"},
	UpdatedAt:   whereHelpertime_Time{field: "`communities`.`updated_at`"},
}

// CommunityRels is where relationship names are stored.
var CommunityRels = struct {
	Affiliations           string
	Bookmarks              string
	Comments               string
	CommunitiesRestaurants string
	InviteTokens           string
}{
	Affiliations:           "Affiliations",
	Bookmarks:              "Bookmarks",
	Comments:               "Comments",
	CommunitiesRestaurants: "CommunitiesRestaurants",
	InviteTokens:           "InviteTokens",
}

// communityR is where relationships are stored.
type communityR struct {
	Affiliations           AffiliationSlice           `boil:"Affiliations" json:"Affiliations" toml:"Affiliations" yaml:"Affiliations"`
	Bookmarks              BookmarkSlice              `boil:"Bookmarks" json:"Bookmarks" toml:"Bookmarks" yaml:"Bookmarks"`
	Comments               CommentSlice               `boil:"Comments" json:"Comments" toml:"Comments" yaml:"Comments"`
	CommunitiesRestaurants CommunitiesRestaurantSlice `boil:"CommunitiesRestaurants" json:"CommunitiesRestaurants" toml:"CommunitiesRestaurants" yaml:"CommunitiesRestaurants"`
	InviteTokens           InviteTokenSlice           `boil:"InviteTokens" json:"InviteTokens" toml:"InviteTokens" yaml:"InviteTokens"`
}

// NewStruct creates a new relationship struct
func (*communityR) NewStruct() *communityR {
	return &communityR{}
}

// communityL is where Load methods for each relationship are stored.
type communityL struct{}

var (
	communityAllColumns            = []string{"id", "name", "description", "latitude", "longitude", "image_file", "created_at", "updated_at"}
	communityColumnsWithoutDefault = []string{"name", "description", "latitude", "longitude", "image_file"}
	communityColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	communityPrimaryKeyColumns     = []string{"id"}
)

type (
	// CommunitySlice is an alias for a slice of pointers to Community.
	// This should almost always be used instead of []Community.
	CommunitySlice []*Community
	// CommunityHook is the signature for custom Community hook methods
	CommunityHook func(context.Context, boil.ContextExecutor, *Community) error

	communityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	communityType                 = reflect.TypeOf(&Community{})
	communityMapping              = queries.MakeStructMapping(communityType)
	communityPrimaryKeyMapping, _ = queries.BindMapping(communityType, communityMapping, communityPrimaryKeyColumns)
	communityInsertCacheMut       sync.RWMutex
	communityInsertCache          = make(map[string]insertCache)
	communityUpdateCacheMut       sync.RWMutex
	communityUpdateCache          = make(map[string]updateCache)
	communityUpsertCacheMut       sync.RWMutex
	communityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var communityBeforeInsertHooks []CommunityHook
var communityBeforeUpdateHooks []CommunityHook
var communityBeforeDeleteHooks []CommunityHook
var communityBeforeUpsertHooks []CommunityHook

var communityAfterInsertHooks []CommunityHook
var communityAfterSelectHooks []CommunityHook
var communityAfterUpdateHooks []CommunityHook
var communityAfterDeleteHooks []CommunityHook
var communityAfterUpsertHooks []CommunityHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Community) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Community) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Community) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Community) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Community) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Community) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Community) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Community) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Community) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range communityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCommunityHook registers your hook function for all future operations.
func AddCommunityHook(hookPoint boil.HookPoint, communityHook CommunityHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		communityBeforeInsertHooks = append(communityBeforeInsertHooks, communityHook)
	case boil.BeforeUpdateHook:
		communityBeforeUpdateHooks = append(communityBeforeUpdateHooks, communityHook)
	case boil.BeforeDeleteHook:
		communityBeforeDeleteHooks = append(communityBeforeDeleteHooks, communityHook)
	case boil.BeforeUpsertHook:
		communityBeforeUpsertHooks = append(communityBeforeUpsertHooks, communityHook)
	case boil.AfterInsertHook:
		communityAfterInsertHooks = append(communityAfterInsertHooks, communityHook)
	case boil.AfterSelectHook:
		communityAfterSelectHooks = append(communityAfterSelectHooks, communityHook)
	case boil.AfterUpdateHook:
		communityAfterUpdateHooks = append(communityAfterUpdateHooks, communityHook)
	case boil.AfterDeleteHook:
		communityAfterDeleteHooks = append(communityAfterDeleteHooks, communityHook)
	case boil.AfterUpsertHook:
		communityAfterUpsertHooks = append(communityAfterUpsertHooks, communityHook)
	}
}

// One returns a single community record from the query.
func (q communityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Community, error) {
	o := &Community{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_gen: failed to execute a one query for communities")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Community records from the query.
func (q communityQuery) All(ctx context.Context, exec boil.ContextExecutor) (CommunitySlice, error) {
	var o []*Community

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_gen: failed to assign all query results to Community slice")
	}

	if len(communityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Community records in the query.
func (q communityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to count communities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q communityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_gen: failed to check if communities exists")
	}

	return count > 0, nil
}

// Affiliations retrieves all the affiliation's Affiliations with an executor.
func (o *Community) Affiliations(mods ...qm.QueryMod) affiliationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`affiliation`.`community_id`=?", o.ID),
	)

	query := Affiliations(queryMods...)
	queries.SetFrom(query.Query, "`affiliation`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`affiliation`.*"})
	}

	return query
}

// Bookmarks retrieves all the bookmark's Bookmarks with an executor.
func (o *Community) Bookmarks(mods ...qm.QueryMod) bookmarkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`bookmarks`.`community_id`=?", o.ID),
	)

	query := Bookmarks(queryMods...)
	queries.SetFrom(query.Query, "`bookmarks`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`bookmarks`.*"})
	}

	return query
}

// Comments retrieves all the comment's Comments with an executor.
func (o *Community) Comments(mods ...qm.QueryMod) commentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`comments`.`community_id`=?", o.ID),
	)

	query := Comments(queryMods...)
	queries.SetFrom(query.Query, "`comments`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`comments`.*"})
	}

	return query
}

// CommunitiesRestaurants retrieves all the communities_restaurant's CommunitiesRestaurants with an executor.
func (o *Community) CommunitiesRestaurants(mods ...qm.QueryMod) communitiesRestaurantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`communities_restaurants`.`community_id`=?", o.ID),
	)

	query := CommunitiesRestaurants(queryMods...)
	queries.SetFrom(query.Query, "`communities_restaurants`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`communities_restaurants`.*"})
	}

	return query
}

// InviteTokens retrieves all the invite_token's InviteTokens with an executor.
func (o *Community) InviteTokens(mods ...qm.QueryMod) inviteTokenQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`invite_tokens`.`community_id`=?", o.ID),
	)

	query := InviteTokens(queryMods...)
	queries.SetFrom(query.Query, "`invite_tokens`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`invite_tokens`.*"})
	}

	return query
}

// LoadAffiliations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (communityL) LoadAffiliations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommunity interface{}, mods queries.Applicator) error {
	var slice []*Community
	var object *Community

	if singular {
		object = maybeCommunity.(*Community)
	} else {
		slice = *maybeCommunity.(*[]*Community)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &communityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &communityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`affiliation`),
		qm.WhereIn(`affiliation.community_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load affiliation")
	}

	var resultSlice []*Affiliation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice affiliation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on affiliation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for affiliation")
	}

	if len(affiliationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Affiliations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &affiliationR{}
			}
			foreign.R.Community = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CommunityID {
				local.R.Affiliations = append(local.R.Affiliations, foreign)
				if foreign.R == nil {
					foreign.R = &affiliationR{}
				}
				foreign.R.Community = local
				break
			}
		}
	}

	return nil
}

// LoadBookmarks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (communityL) LoadBookmarks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommunity interface{}, mods queries.Applicator) error {
	var slice []*Community
	var object *Community

	if singular {
		object = maybeCommunity.(*Community)
	} else {
		slice = *maybeCommunity.(*[]*Community)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &communityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &communityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bookmarks`),
		qm.WhereIn(`bookmarks.community_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bookmarks")
	}

	var resultSlice []*Bookmark
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bookmarks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bookmarks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bookmarks")
	}

	if len(bookmarkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Bookmarks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookmarkR{}
			}
			foreign.R.Community = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CommunityID {
				local.R.Bookmarks = append(local.R.Bookmarks, foreign)
				if foreign.R == nil {
					foreign.R = &bookmarkR{}
				}
				foreign.R.Community = local
				break
			}
		}
	}

	return nil
}

// LoadComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (communityL) LoadComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommunity interface{}, mods queries.Applicator) error {
	var slice []*Community
	var object *Community

	if singular {
		object = maybeCommunity.(*Community)
	} else {
		slice = *maybeCommunity.(*[]*Community)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &communityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &communityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`comments`),
		qm.WhereIn(`comments.community_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load comments")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comments")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Comments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commentR{}
			}
			foreign.R.Community = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CommunityID {
				local.R.Comments = append(local.R.Comments, foreign)
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.Community = local
				break
			}
		}
	}

	return nil
}

// LoadCommunitiesRestaurants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (communityL) LoadCommunitiesRestaurants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommunity interface{}, mods queries.Applicator) error {
	var slice []*Community
	var object *Community

	if singular {
		object = maybeCommunity.(*Community)
	} else {
		slice = *maybeCommunity.(*[]*Community)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &communityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &communityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`communities_restaurants`),
		qm.WhereIn(`communities_restaurants.community_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load communities_restaurants")
	}

	var resultSlice []*CommunitiesRestaurant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice communities_restaurants")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on communities_restaurants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for communities_restaurants")
	}

	if len(communitiesRestaurantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CommunitiesRestaurants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &communitiesRestaurantR{}
			}
			foreign.R.Community = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CommunityID {
				local.R.CommunitiesRestaurants = append(local.R.CommunitiesRestaurants, foreign)
				if foreign.R == nil {
					foreign.R = &communitiesRestaurantR{}
				}
				foreign.R.Community = local
				break
			}
		}
	}

	return nil
}

// LoadInviteTokens allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (communityL) LoadInviteTokens(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommunity interface{}, mods queries.Applicator) error {
	var slice []*Community
	var object *Community

	if singular {
		object = maybeCommunity.(*Community)
	} else {
		slice = *maybeCommunity.(*[]*Community)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &communityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &communityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`invite_tokens`),
		qm.WhereIn(`invite_tokens.community_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load invite_tokens")
	}

	var resultSlice []*InviteToken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice invite_tokens")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on invite_tokens")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invite_tokens")
	}

	if len(inviteTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InviteTokens = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &inviteTokenR{}
			}
			foreign.R.Community = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CommunityID {
				local.R.InviteTokens = append(local.R.InviteTokens, foreign)
				if foreign.R == nil {
					foreign.R = &inviteTokenR{}
				}
				foreign.R.Community = local
				break
			}
		}
	}

	return nil
}

// AddAffiliations adds the given related objects to the existing relationships
// of the community, optionally inserting them as new records.
// Appends related to o.R.Affiliations.
// Sets related.R.Community appropriately.
func (o *Community) AddAffiliations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Affiliation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CommunityID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `affiliation` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"community_id"}),
				strmangle.WhereClause("`", "`", 0, affiliationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CommunityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &communityR{
			Affiliations: related,
		}
	} else {
		o.R.Affiliations = append(o.R.Affiliations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &affiliationR{
				Community: o,
			}
		} else {
			rel.R.Community = o
		}
	}
	return nil
}

// AddBookmarks adds the given related objects to the existing relationships
// of the community, optionally inserting them as new records.
// Appends related to o.R.Bookmarks.
// Sets related.R.Community appropriately.
func (o *Community) AddBookmarks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Bookmark) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CommunityID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `bookmarks` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"community_id"}),
				strmangle.WhereClause("`", "`", 0, bookmarkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CommunityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &communityR{
			Bookmarks: related,
		}
	} else {
		o.R.Bookmarks = append(o.R.Bookmarks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookmarkR{
				Community: o,
			}
		} else {
			rel.R.Community = o
		}
	}
	return nil
}

// AddComments adds the given related objects to the existing relationships
// of the community, optionally inserting them as new records.
// Appends related to o.R.Comments.
// Sets related.R.Community appropriately.
func (o *Community) AddComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Comment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CommunityID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `comments` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"community_id"}),
				strmangle.WhereClause("`", "`", 0, commentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CommunityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &communityR{
			Comments: related,
		}
	} else {
		o.R.Comments = append(o.R.Comments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentR{
				Community: o,
			}
		} else {
			rel.R.Community = o
		}
	}
	return nil
}

// AddCommunitiesRestaurants adds the given related objects to the existing relationships
// of the community, optionally inserting them as new records.
// Appends related to o.R.CommunitiesRestaurants.
// Sets related.R.Community appropriately.
func (o *Community) AddCommunitiesRestaurants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CommunitiesRestaurant) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CommunityID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `communities_restaurants` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"community_id"}),
				strmangle.WhereClause("`", "`", 0, communitiesRestaurantPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CommunityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &communityR{
			CommunitiesRestaurants: related,
		}
	} else {
		o.R.CommunitiesRestaurants = append(o.R.CommunitiesRestaurants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &communitiesRestaurantR{
				Community: o,
			}
		} else {
			rel.R.Community = o
		}
	}
	return nil
}

// AddInviteTokens adds the given related objects to the existing relationships
// of the community, optionally inserting them as new records.
// Appends related to o.R.InviteTokens.
// Sets related.R.Community appropriately.
func (o *Community) AddInviteTokens(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InviteToken) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CommunityID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `invite_tokens` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"community_id"}),
				strmangle.WhereClause("`", "`", 0, inviteTokenPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.TokenDigest}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CommunityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &communityR{
			InviteTokens: related,
		}
	} else {
		o.R.InviteTokens = append(o.R.InviteTokens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &inviteTokenR{
				Community: o,
			}
		} else {
			rel.R.Community = o
		}
	}
	return nil
}

// Communities retrieves all the records using an executor.
func Communities(mods ...qm.QueryMod) communityQuery {
	mods = append(mods, qm.From("`communities`"))
	return communityQuery{NewQuery(mods...)}
}

// FindCommunity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommunity(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Community, error) {
	communityObj := &Community{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `communities` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, communityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_gen: unable to select from communities")
	}

	if err = communityObj.doAfterSelectHooks(ctx, exec); err != nil {
		return communityObj, err
	}

	return communityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Community) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_gen: no communities provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(communityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	communityInsertCacheMut.RLock()
	cache, cached := communityInsertCache[key]
	communityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			communityAllColumns,
			communityColumnsWithDefault,
			communityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(communityType, communityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(communityType, communityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `communities` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `communities` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `communities` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, communityPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models_gen: unable to insert into communities")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == communityMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to populate default values for communities")
	}

CacheNoHooks:
	if !cached {
		communityInsertCacheMut.Lock()
		communityInsertCache[key] = cache
		communityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Community.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Community) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	communityUpdateCacheMut.RLock()
	cache, cached := communityUpdateCache[key]
	communityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			communityAllColumns,
			communityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_gen: unable to update communities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `communities` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, communityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(communityType, communityMapping, append(wl, communityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to update communities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by update for communities")
	}

	if !cached {
		communityUpdateCacheMut.Lock()
		communityUpdateCache[key] = cache
		communityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q communityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to update all for communities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to retrieve rows affected for communities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommunitySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_gen: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), communityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `communities` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, communityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to update all in community slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to retrieve rows affected all in update all community")
	}
	return rowsAff, nil
}

var mySQLCommunityUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Community) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models_gen: no communities provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(communityColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCommunityUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	communityUpsertCacheMut.RLock()
	cache, cached := communityUpsertCache[key]
	communityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			communityAllColumns,
			communityColumnsWithDefault,
			communityColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			communityAllColumns,
			communityPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models_gen: unable to upsert communities, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`communities`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `communities` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(communityType, communityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(communityType, communityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models_gen: unable to upsert for communities")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == communityMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(communityType, communityMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to retrieve unique values for communities")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to populate default values for communities")
	}

CacheNoHooks:
	if !cached {
		communityUpsertCacheMut.Lock()
		communityUpsertCache[key] = cache
		communityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Community record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Community) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_gen: no Community provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), communityPrimaryKeyMapping)
	sql := "DELETE FROM `communities` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to delete from communities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by delete for communities")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q communityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_gen: no communityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to delete all from communities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by deleteall for communities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommunitySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(communityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), communityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `communities` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, communityPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to delete all from community slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by deleteall for communities")
	}

	if len(communityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Community) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCommunity(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommunitySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommunitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), communityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `communities`.* FROM `communities` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, communityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to reload all in CommunitySlice")
	}

	*o = slice

	return nil
}

// CommunityExists checks if the Community row exists.
func CommunityExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `communities` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_gen: unable to check if communities exists")
	}

	return exists, nil
}
