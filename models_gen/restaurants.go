// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_gen

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Restaurant is an object representing the database table.
type Restaurant struct {
	ID       int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name     string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Location null.String `boil:"location" json:"location,omitempty" toml:"location" yaml:"location,omitempty"`
	// 住所
	Address string `boil:"address" json:"address" toml:"address" yaml:"address"`
	// レストラン情報の取得元のレストランのURL
	URL string `boil:"url" json:"url" toml:"url" yaml:"url"`
	// 画像のURL
	ImageURL null.String `boil:"image_url" json:"image_url,omitempty" toml:"image_url" yaml:"image_url,omitempty"`
	// レストラン情報の取得元
	Source string `boil:"source" json:"source" toml:"source" yaml:"source"`
	// レストラン情報の取得元のレストランID
	SourceID  string    `boil:"source_id" json:"source_id" toml:"source_id" yaml:"source_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *restaurantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L restaurantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RestaurantColumns = struct {
	ID        string
	Name      string
	Location  string
	Address   string
	URL       string
	ImageURL  string
	Source    string
	SourceID  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	Location:  "location",
	Address:   "address",
	URL:       "url",
	ImageURL:  "image_url",
	Source:    "source",
	SourceID:  "source_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var RestaurantTableColumns = struct {
	ID        string
	Name      string
	Location  string
	Address   string
	URL       string
	ImageURL  string
	Source    string
	SourceID  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "restaurants.id",
	Name:      "restaurants.name",
	Location:  "restaurants.location",
	Address:   "restaurants.address",
	URL:       "restaurants.url",
	ImageURL:  "restaurants.image_url",
	Source:    "restaurants.source",
	SourceID:  "restaurants.source_id",
	CreatedAt: "restaurants.created_at",
	UpdatedAt: "restaurants.updated_at",
}

// Generated where

var RestaurantWhere = struct {
	ID        whereHelperint64
	Name      whereHelperstring
	Location  whereHelpernull_String
	Address   whereHelperstring
	URL       whereHelperstring
	ImageURL  whereHelpernull_String
	Source    whereHelperstring
	SourceID  whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "`restaurants`.`id`"},
	Name:      whereHelperstring{field: "`restaurants`.`name`"},
	Location:  whereHelpernull_String{field: "`restaurants`.`location`"},
	Address:   whereHelperstring{field: "`restaurants`.`address`"},
	URL:       whereHelperstring{field: "`restaurants`.`url`"},
	ImageURL:  whereHelpernull_String{field: "`restaurants`.`image_url`"},
	Source:    whereHelperstring{field: "`restaurants`.`source`"},
	SourceID:  whereHelperstring{field: "`restaurants`.`source_id`"},
	CreatedAt: whereHelpertime_Time{field: "`restaurants`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`restaurants`.`updated_at`"},
}

// RestaurantRels is where relationship names are stored.
var RestaurantRels = struct {
	Comments               string
	CommunitiesRestaurants string
}{
	Comments:               "Comments",
	CommunitiesRestaurants: "CommunitiesRestaurants",
}

// restaurantR is where relationships are stored.
type restaurantR struct {
	Comments               CommentSlice               `boil:"Comments" json:"Comments" toml:"Comments" yaml:"Comments"`
	CommunitiesRestaurants CommunitiesRestaurantSlice `boil:"CommunitiesRestaurants" json:"CommunitiesRestaurants" toml:"CommunitiesRestaurants" yaml:"CommunitiesRestaurants"`
}

// NewStruct creates a new relationship struct
func (*restaurantR) NewStruct() *restaurantR {
	return &restaurantR{}
}

// restaurantL is where Load methods for each relationship are stored.
type restaurantL struct{}

var (
	restaurantAllColumns            = []string{"id", "name", "location", "address", "url", "image_url", "source", "source_id", "created_at", "updated_at"}
	restaurantColumnsWithoutDefault = []string{"name", "location", "address", "url", "image_url", "source", "source_id"}
	restaurantColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	restaurantPrimaryKeyColumns     = []string{"id"}
)

type (
	// RestaurantSlice is an alias for a slice of pointers to Restaurant.
	// This should almost always be used instead of []Restaurant.
	RestaurantSlice []*Restaurant
	// RestaurantHook is the signature for custom Restaurant hook methods
	RestaurantHook func(context.Context, boil.ContextExecutor, *Restaurant) error

	restaurantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	restaurantType                 = reflect.TypeOf(&Restaurant{})
	restaurantMapping              = queries.MakeStructMapping(restaurantType)
	restaurantPrimaryKeyMapping, _ = queries.BindMapping(restaurantType, restaurantMapping, restaurantPrimaryKeyColumns)
	restaurantInsertCacheMut       sync.RWMutex
	restaurantInsertCache          = make(map[string]insertCache)
	restaurantUpdateCacheMut       sync.RWMutex
	restaurantUpdateCache          = make(map[string]updateCache)
	restaurantUpsertCacheMut       sync.RWMutex
	restaurantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var restaurantBeforeInsertHooks []RestaurantHook
var restaurantBeforeUpdateHooks []RestaurantHook
var restaurantBeforeDeleteHooks []RestaurantHook
var restaurantBeforeUpsertHooks []RestaurantHook

var restaurantAfterInsertHooks []RestaurantHook
var restaurantAfterSelectHooks []RestaurantHook
var restaurantAfterUpdateHooks []RestaurantHook
var restaurantAfterDeleteHooks []RestaurantHook
var restaurantAfterUpsertHooks []RestaurantHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Restaurant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Restaurant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Restaurant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Restaurant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Restaurant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Restaurant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Restaurant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Restaurant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Restaurant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRestaurantHook registers your hook function for all future operations.
func AddRestaurantHook(hookPoint boil.HookPoint, restaurantHook RestaurantHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		restaurantBeforeInsertHooks = append(restaurantBeforeInsertHooks, restaurantHook)
	case boil.BeforeUpdateHook:
		restaurantBeforeUpdateHooks = append(restaurantBeforeUpdateHooks, restaurantHook)
	case boil.BeforeDeleteHook:
		restaurantBeforeDeleteHooks = append(restaurantBeforeDeleteHooks, restaurantHook)
	case boil.BeforeUpsertHook:
		restaurantBeforeUpsertHooks = append(restaurantBeforeUpsertHooks, restaurantHook)
	case boil.AfterInsertHook:
		restaurantAfterInsertHooks = append(restaurantAfterInsertHooks, restaurantHook)
	case boil.AfterSelectHook:
		restaurantAfterSelectHooks = append(restaurantAfterSelectHooks, restaurantHook)
	case boil.AfterUpdateHook:
		restaurantAfterUpdateHooks = append(restaurantAfterUpdateHooks, restaurantHook)
	case boil.AfterDeleteHook:
		restaurantAfterDeleteHooks = append(restaurantAfterDeleteHooks, restaurantHook)
	case boil.AfterUpsertHook:
		restaurantAfterUpsertHooks = append(restaurantAfterUpsertHooks, restaurantHook)
	}
}

// One returns a single restaurant record from the query.
func (q restaurantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Restaurant, error) {
	o := &Restaurant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_gen: failed to execute a one query for restaurants")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Restaurant records from the query.
func (q restaurantQuery) All(ctx context.Context, exec boil.ContextExecutor) (RestaurantSlice, error) {
	var o []*Restaurant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_gen: failed to assign all query results to Restaurant slice")
	}

	if len(restaurantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Restaurant records in the query.
func (q restaurantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to count restaurants rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q restaurantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_gen: failed to check if restaurants exists")
	}

	return count > 0, nil
}

// Comments retrieves all the comment's Comments with an executor.
func (o *Restaurant) Comments(mods ...qm.QueryMod) commentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`comments`.`restaurant_id`=?", o.ID),
	)

	query := Comments(queryMods...)
	queries.SetFrom(query.Query, "`comments`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`comments`.*"})
	}

	return query
}

// CommunitiesRestaurants retrieves all the communities_restaurant's CommunitiesRestaurants with an executor.
func (o *Restaurant) CommunitiesRestaurants(mods ...qm.QueryMod) communitiesRestaurantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`communities_restaurants`.`restaurant_id`=?", o.ID),
	)

	query := CommunitiesRestaurants(queryMods...)
	queries.SetFrom(query.Query, "`communities_restaurants`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`communities_restaurants`.*"})
	}

	return query
}

// LoadComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (restaurantL) LoadComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRestaurant interface{}, mods queries.Applicator) error {
	var slice []*Restaurant
	var object *Restaurant

	if singular {
		object = maybeRestaurant.(*Restaurant)
	} else {
		slice = *maybeRestaurant.(*[]*Restaurant)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &restaurantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &restaurantR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`comments`),
		qm.WhereIn(`comments.restaurant_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load comments")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comments")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Comments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commentR{}
			}
			foreign.R.Restaurant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RestaurantID {
				local.R.Comments = append(local.R.Comments, foreign)
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.Restaurant = local
				break
			}
		}
	}

	return nil
}

// LoadCommunitiesRestaurants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (restaurantL) LoadCommunitiesRestaurants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRestaurant interface{}, mods queries.Applicator) error {
	var slice []*Restaurant
	var object *Restaurant

	if singular {
		object = maybeRestaurant.(*Restaurant)
	} else {
		slice = *maybeRestaurant.(*[]*Restaurant)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &restaurantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &restaurantR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`communities_restaurants`),
		qm.WhereIn(`communities_restaurants.restaurant_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load communities_restaurants")
	}

	var resultSlice []*CommunitiesRestaurant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice communities_restaurants")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on communities_restaurants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for communities_restaurants")
	}

	if len(communitiesRestaurantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CommunitiesRestaurants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &communitiesRestaurantR{}
			}
			foreign.R.Restaurant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RestaurantID {
				local.R.CommunitiesRestaurants = append(local.R.CommunitiesRestaurants, foreign)
				if foreign.R == nil {
					foreign.R = &communitiesRestaurantR{}
				}
				foreign.R.Restaurant = local
				break
			}
		}
	}

	return nil
}

// AddComments adds the given related objects to the existing relationships
// of the restaurant, optionally inserting them as new records.
// Appends related to o.R.Comments.
// Sets related.R.Restaurant appropriately.
func (o *Restaurant) AddComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Comment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RestaurantID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `comments` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"restaurant_id"}),
				strmangle.WhereClause("`", "`", 0, commentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RestaurantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &restaurantR{
			Comments: related,
		}
	} else {
		o.R.Comments = append(o.R.Comments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentR{
				Restaurant: o,
			}
		} else {
			rel.R.Restaurant = o
		}
	}
	return nil
}

// AddCommunitiesRestaurants adds the given related objects to the existing relationships
// of the restaurant, optionally inserting them as new records.
// Appends related to o.R.CommunitiesRestaurants.
// Sets related.R.Restaurant appropriately.
func (o *Restaurant) AddCommunitiesRestaurants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CommunitiesRestaurant) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RestaurantID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `communities_restaurants` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"restaurant_id"}),
				strmangle.WhereClause("`", "`", 0, communitiesRestaurantPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RestaurantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &restaurantR{
			CommunitiesRestaurants: related,
		}
	} else {
		o.R.CommunitiesRestaurants = append(o.R.CommunitiesRestaurants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &communitiesRestaurantR{
				Restaurant: o,
			}
		} else {
			rel.R.Restaurant = o
		}
	}
	return nil
}

// Restaurants retrieves all the records using an executor.
func Restaurants(mods ...qm.QueryMod) restaurantQuery {
	mods = append(mods, qm.From("`restaurants`"))
	return restaurantQuery{NewQuery(mods...)}
}

// FindRestaurant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRestaurant(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Restaurant, error) {
	restaurantObj := &Restaurant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `restaurants` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, restaurantObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_gen: unable to select from restaurants")
	}

	if err = restaurantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return restaurantObj, err
	}

	return restaurantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Restaurant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_gen: no restaurants provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restaurantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	restaurantInsertCacheMut.RLock()
	cache, cached := restaurantInsertCache[key]
	restaurantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			restaurantAllColumns,
			restaurantColumnsWithDefault,
			restaurantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(restaurantType, restaurantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(restaurantType, restaurantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `restaurants` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `restaurants` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `restaurants` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, restaurantPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models_gen: unable to insert into restaurants")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == restaurantMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to populate default values for restaurants")
	}

CacheNoHooks:
	if !cached {
		restaurantInsertCacheMut.Lock()
		restaurantInsertCache[key] = cache
		restaurantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Restaurant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Restaurant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	restaurantUpdateCacheMut.RLock()
	cache, cached := restaurantUpdateCache[key]
	restaurantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			restaurantAllColumns,
			restaurantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_gen: unable to update restaurants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `restaurants` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, restaurantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(restaurantType, restaurantMapping, append(wl, restaurantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to update restaurants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by update for restaurants")
	}

	if !cached {
		restaurantUpdateCacheMut.Lock()
		restaurantUpdateCache[key] = cache
		restaurantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q restaurantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to update all for restaurants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to retrieve rows affected for restaurants")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RestaurantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_gen: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restaurantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `restaurants` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, restaurantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to update all in restaurant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to retrieve rows affected all in update all restaurant")
	}
	return rowsAff, nil
}

var mySQLRestaurantUniqueColumns = []string{
	"id",
	"address",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Restaurant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models_gen: no restaurants provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restaurantColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRestaurantUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	restaurantUpsertCacheMut.RLock()
	cache, cached := restaurantUpsertCache[key]
	restaurantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			restaurantAllColumns,
			restaurantColumnsWithDefault,
			restaurantColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			restaurantAllColumns,
			restaurantPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models_gen: unable to upsert restaurants, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`restaurants`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `restaurants` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(restaurantType, restaurantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(restaurantType, restaurantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models_gen: unable to upsert for restaurants")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == restaurantMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(restaurantType, restaurantMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to retrieve unique values for restaurants")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to populate default values for restaurants")
	}

CacheNoHooks:
	if !cached {
		restaurantUpsertCacheMut.Lock()
		restaurantUpsertCache[key] = cache
		restaurantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Restaurant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Restaurant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_gen: no Restaurant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), restaurantPrimaryKeyMapping)
	sql := "DELETE FROM `restaurants` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to delete from restaurants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by delete for restaurants")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q restaurantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_gen: no restaurantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to delete all from restaurants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by deleteall for restaurants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RestaurantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(restaurantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restaurantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `restaurants` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, restaurantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to delete all from restaurant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by deleteall for restaurants")
	}

	if len(restaurantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Restaurant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRestaurant(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RestaurantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RestaurantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restaurantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `restaurants`.* FROM `restaurants` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, restaurantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to reload all in RestaurantSlice")
	}

	*o = slice

	return nil
}

// RestaurantExists checks if the Restaurant row exists.
func RestaurantExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `restaurants` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_gen: unable to check if restaurants exists")
	}

	return exists, nil
}
