// Code generated by SQLBoiler 4.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_gen

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InviteToken is an object representing the database table.
type InviteToken struct {
	TokenDigest string    `boil:"token_digest" json:"token_digest" toml:"token_digest" yaml:"token_digest"`
	ExpiresAt   time.Time `boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	CommunityID int64     `boil:"community_id" json:"community_id" toml:"community_id" yaml:"community_id"`
	IssuedAt    time.Time `boil:"issued_at" json:"issued_at" toml:"issued_at" yaml:"issued_at"`

	R *inviteTokenR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L inviteTokenL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InviteTokenColumns = struct {
	TokenDigest string
	ExpiresAt   string
	CommunityID string
	IssuedAt    string
}{
	TokenDigest: "token_digest",
	ExpiresAt:   "expires_at",
	CommunityID: "community_id",
	IssuedAt:    "issued_at",
}

var InviteTokenTableColumns = struct {
	TokenDigest string
	ExpiresAt   string
	CommunityID string
	IssuedAt    string
}{
	TokenDigest: "invite_tokens.token_digest",
	ExpiresAt:   "invite_tokens.expires_at",
	CommunityID: "invite_tokens.community_id",
	IssuedAt:    "invite_tokens.issued_at",
}

// Generated where

var InviteTokenWhere = struct {
	TokenDigest whereHelperstring
	ExpiresAt   whereHelpertime_Time
	CommunityID whereHelperint64
	IssuedAt    whereHelpertime_Time
}{
	TokenDigest: whereHelperstring{field: "`invite_tokens`.`token_digest`"},
	ExpiresAt:   whereHelpertime_Time{field: "`invite_tokens`.`expires_at`"},
	CommunityID: whereHelperint64{field: "`invite_tokens`.`community_id`"},
	IssuedAt:    whereHelpertime_Time{field: "`invite_tokens`.`issued_at`"},
}

// InviteTokenRels is where relationship names are stored.
var InviteTokenRels = struct {
	Community string
}{
	Community: "Community",
}

// inviteTokenR is where relationships are stored.
type inviteTokenR struct {
	Community *Community `boil:"Community" json:"Community" toml:"Community" yaml:"Community"`
}

// NewStruct creates a new relationship struct
func (*inviteTokenR) NewStruct() *inviteTokenR {
	return &inviteTokenR{}
}

// inviteTokenL is where Load methods for each relationship are stored.
type inviteTokenL struct{}

var (
	inviteTokenAllColumns            = []string{"token_digest", "expires_at", "community_id", "issued_at"}
	inviteTokenColumnsWithoutDefault = []string{"token_digest", "expires_at", "community_id"}
	inviteTokenColumnsWithDefault    = []string{"issued_at"}
	inviteTokenPrimaryKeyColumns     = []string{"token_digest"}
)

type (
	// InviteTokenSlice is an alias for a slice of pointers to InviteToken.
	// This should almost always be used instead of []InviteToken.
	InviteTokenSlice []*InviteToken
	// InviteTokenHook is the signature for custom InviteToken hook methods
	InviteTokenHook func(context.Context, boil.ContextExecutor, *InviteToken) error

	inviteTokenQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	inviteTokenType                 = reflect.TypeOf(&InviteToken{})
	inviteTokenMapping              = queries.MakeStructMapping(inviteTokenType)
	inviteTokenPrimaryKeyMapping, _ = queries.BindMapping(inviteTokenType, inviteTokenMapping, inviteTokenPrimaryKeyColumns)
	inviteTokenInsertCacheMut       sync.RWMutex
	inviteTokenInsertCache          = make(map[string]insertCache)
	inviteTokenUpdateCacheMut       sync.RWMutex
	inviteTokenUpdateCache          = make(map[string]updateCache)
	inviteTokenUpsertCacheMut       sync.RWMutex
	inviteTokenUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var inviteTokenBeforeInsertHooks []InviteTokenHook
var inviteTokenBeforeUpdateHooks []InviteTokenHook
var inviteTokenBeforeDeleteHooks []InviteTokenHook
var inviteTokenBeforeUpsertHooks []InviteTokenHook

var inviteTokenAfterInsertHooks []InviteTokenHook
var inviteTokenAfterSelectHooks []InviteTokenHook
var inviteTokenAfterUpdateHooks []InviteTokenHook
var inviteTokenAfterDeleteHooks []InviteTokenHook
var inviteTokenAfterUpsertHooks []InviteTokenHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InviteToken) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteTokenBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InviteToken) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteTokenBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InviteToken) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteTokenBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InviteToken) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteTokenBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InviteToken) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteTokenAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InviteToken) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteTokenAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InviteToken) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteTokenAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InviteToken) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteTokenAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InviteToken) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteTokenAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInviteTokenHook registers your hook function for all future operations.
func AddInviteTokenHook(hookPoint boil.HookPoint, inviteTokenHook InviteTokenHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		inviteTokenBeforeInsertHooks = append(inviteTokenBeforeInsertHooks, inviteTokenHook)
	case boil.BeforeUpdateHook:
		inviteTokenBeforeUpdateHooks = append(inviteTokenBeforeUpdateHooks, inviteTokenHook)
	case boil.BeforeDeleteHook:
		inviteTokenBeforeDeleteHooks = append(inviteTokenBeforeDeleteHooks, inviteTokenHook)
	case boil.BeforeUpsertHook:
		inviteTokenBeforeUpsertHooks = append(inviteTokenBeforeUpsertHooks, inviteTokenHook)
	case boil.AfterInsertHook:
		inviteTokenAfterInsertHooks = append(inviteTokenAfterInsertHooks, inviteTokenHook)
	case boil.AfterSelectHook:
		inviteTokenAfterSelectHooks = append(inviteTokenAfterSelectHooks, inviteTokenHook)
	case boil.AfterUpdateHook:
		inviteTokenAfterUpdateHooks = append(inviteTokenAfterUpdateHooks, inviteTokenHook)
	case boil.AfterDeleteHook:
		inviteTokenAfterDeleteHooks = append(inviteTokenAfterDeleteHooks, inviteTokenHook)
	case boil.AfterUpsertHook:
		inviteTokenAfterUpsertHooks = append(inviteTokenAfterUpsertHooks, inviteTokenHook)
	}
}

// One returns a single inviteToken record from the query.
func (q inviteTokenQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InviteToken, error) {
	o := &InviteToken{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_gen: failed to execute a one query for invite_tokens")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InviteToken records from the query.
func (q inviteTokenQuery) All(ctx context.Context, exec boil.ContextExecutor) (InviteTokenSlice, error) {
	var o []*InviteToken

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_gen: failed to assign all query results to InviteToken slice")
	}

	if len(inviteTokenAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InviteToken records in the query.
func (q inviteTokenQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to count invite_tokens rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q inviteTokenQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_gen: failed to check if invite_tokens exists")
	}

	return count > 0, nil
}

// Community pointed to by the foreign key.
func (o *InviteToken) Community(mods ...qm.QueryMod) communityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CommunityID),
	}

	queryMods = append(queryMods, mods...)

	query := Communities(queryMods...)
	queries.SetFrom(query.Query, "`communities`")

	return query
}

// LoadCommunity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (inviteTokenL) LoadCommunity(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInviteToken interface{}, mods queries.Applicator) error {
	var slice []*InviteToken
	var object *InviteToken

	if singular {
		object = maybeInviteToken.(*InviteToken)
	} else {
		slice = *maybeInviteToken.(*[]*InviteToken)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &inviteTokenR{}
		}
		args = append(args, object.CommunityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &inviteTokenR{}
			}

			for _, a := range args {
				if a == obj.CommunityID {
					continue Outer
				}
			}

			args = append(args, obj.CommunityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`communities`),
		qm.WhereIn(`communities.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Community")
	}

	var resultSlice []*Community
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Community")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for communities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for communities")
	}

	if len(inviteTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Community = foreign
		if foreign.R == nil {
			foreign.R = &communityR{}
		}
		foreign.R.InviteTokens = append(foreign.R.InviteTokens, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CommunityID == foreign.ID {
				local.R.Community = foreign
				if foreign.R == nil {
					foreign.R = &communityR{}
				}
				foreign.R.InviteTokens = append(foreign.R.InviteTokens, local)
				break
			}
		}
	}

	return nil
}

// SetCommunity of the inviteToken to the related item.
// Sets o.R.Community to related.
// Adds o to related.R.InviteTokens.
func (o *InviteToken) SetCommunity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Community) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `invite_tokens` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"community_id"}),
		strmangle.WhereClause("`", "`", 0, inviteTokenPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TokenDigest}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CommunityID = related.ID
	if o.R == nil {
		o.R = &inviteTokenR{
			Community: related,
		}
	} else {
		o.R.Community = related
	}

	if related.R == nil {
		related.R = &communityR{
			InviteTokens: InviteTokenSlice{o},
		}
	} else {
		related.R.InviteTokens = append(related.R.InviteTokens, o)
	}

	return nil
}

// InviteTokens retrieves all the records using an executor.
func InviteTokens(mods ...qm.QueryMod) inviteTokenQuery {
	mods = append(mods, qm.From("`invite_tokens`"))
	return inviteTokenQuery{NewQuery(mods...)}
}

// FindInviteToken retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInviteToken(ctx context.Context, exec boil.ContextExecutor, tokenDigest string, selectCols ...string) (*InviteToken, error) {
	inviteTokenObj := &InviteToken{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `invite_tokens` where `token_digest`=?", sel,
	)

	q := queries.Raw(query, tokenDigest)

	err := q.Bind(ctx, exec, inviteTokenObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_gen: unable to select from invite_tokens")
	}

	if err = inviteTokenObj.doAfterSelectHooks(ctx, exec); err != nil {
		return inviteTokenObj, err
	}

	return inviteTokenObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InviteToken) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_gen: no invite_tokens provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inviteTokenColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	inviteTokenInsertCacheMut.RLock()
	cache, cached := inviteTokenInsertCache[key]
	inviteTokenInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			inviteTokenAllColumns,
			inviteTokenColumnsWithDefault,
			inviteTokenColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(inviteTokenType, inviteTokenMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(inviteTokenType, inviteTokenMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `invite_tokens` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `invite_tokens` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `invite_tokens` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, inviteTokenPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models_gen: unable to insert into invite_tokens")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TokenDigest,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to populate default values for invite_tokens")
	}

CacheNoHooks:
	if !cached {
		inviteTokenInsertCacheMut.Lock()
		inviteTokenInsertCache[key] = cache
		inviteTokenInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InviteToken.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InviteToken) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	inviteTokenUpdateCacheMut.RLock()
	cache, cached := inviteTokenUpdateCache[key]
	inviteTokenUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			inviteTokenAllColumns,
			inviteTokenPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_gen: unable to update invite_tokens, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `invite_tokens` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, inviteTokenPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(inviteTokenType, inviteTokenMapping, append(wl, inviteTokenPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to update invite_tokens row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by update for invite_tokens")
	}

	if !cached {
		inviteTokenUpdateCacheMut.Lock()
		inviteTokenUpdateCache[key] = cache
		inviteTokenUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q inviteTokenQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to update all for invite_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to retrieve rows affected for invite_tokens")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InviteTokenSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_gen: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inviteTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `invite_tokens` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inviteTokenPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to update all in inviteToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to retrieve rows affected all in update all inviteToken")
	}
	return rowsAff, nil
}

var mySQLInviteTokenUniqueColumns = []string{
	"token_digest",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InviteToken) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models_gen: no invite_tokens provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inviteTokenColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLInviteTokenUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	inviteTokenUpsertCacheMut.RLock()
	cache, cached := inviteTokenUpsertCache[key]
	inviteTokenUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			inviteTokenAllColumns,
			inviteTokenColumnsWithDefault,
			inviteTokenColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			inviteTokenAllColumns,
			inviteTokenPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models_gen: unable to upsert invite_tokens, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`invite_tokens`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `invite_tokens` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(inviteTokenType, inviteTokenMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(inviteTokenType, inviteTokenMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models_gen: unable to upsert for invite_tokens")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(inviteTokenType, inviteTokenMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to retrieve unique values for invite_tokens")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to populate default values for invite_tokens")
	}

CacheNoHooks:
	if !cached {
		inviteTokenUpsertCacheMut.Lock()
		inviteTokenUpsertCache[key] = cache
		inviteTokenUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InviteToken record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InviteToken) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_gen: no InviteToken provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), inviteTokenPrimaryKeyMapping)
	sql := "DELETE FROM `invite_tokens` WHERE `token_digest`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to delete from invite_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by delete for invite_tokens")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q inviteTokenQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_gen: no inviteTokenQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to delete all from invite_tokens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by deleteall for invite_tokens")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InviteTokenSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(inviteTokenBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inviteTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `invite_tokens` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inviteTokenPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: unable to delete all from inviteToken slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_gen: failed to get rows affected by deleteall for invite_tokens")
	}

	if len(inviteTokenAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InviteToken) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInviteToken(ctx, exec, o.TokenDigest)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InviteTokenSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InviteTokenSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inviteTokenPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `invite_tokens`.* FROM `invite_tokens` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inviteTokenPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_gen: unable to reload all in InviteTokenSlice")
	}

	*o = slice

	return nil
}

// InviteTokenExists checks if the InviteToken row exists.
func InviteTokenExists(ctx context.Context, exec boil.ContextExecutor, tokenDigest string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `invite_tokens` where `token_digest`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, tokenDigest)
	}
	row := exec.QueryRowContext(ctx, sql, tokenDigest)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_gen: unable to check if invite_tokens exists")
	}

	return exists, nil
}
