// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for AuthVender.
const (
	AuthVenderAnonymous AuthVender = "Anonymous"

	AuthVenderApple AuthVender = "Apple"

	AuthVenderGoogle AuthVender = "Google"
)

// Add a restaurant to a community
type AddRestaurantRequest struct {
	RestaurantId Long `json:"restaurant_id"`
}

// AuthInfo defines model for authInfo.
type AuthInfo struct {
	Token  string     `json:"token"`
	Vender AuthVender `json:"vender"`
}

// AuthVender defines model for authVender.
type AuthVender string

// Private comments for a restaurant
type Comment struct {
	Body         *string `json:"body,omitempty"`
	CommunityId  *Long   `json:"community_id,omitempty"`
	RestaurantId *Long   `json:"restaurant_id,omitempty"`

	// Updated date and time
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Goyotashi community
type Community struct {
	Description *string   `json:"description,omitempty"`
	Id          Long      `json:"id"`
	Location    *Location `json:"location,omitempty"`
	Name        string    `json:"name"`
}

// CreateCommunityRequest defines model for createCommunityRequest.
type CreateCommunityRequest map[string]interface{}

// CreateUserRequest defines model for createUserRequest.
type CreateUserRequest struct {
	Name   string     `json:"name"`
	Vender AuthVender `json:"vender"`
}

// Location defines model for location.
type Location struct {
	// latitude
	Lat float64 `json:"lat"`

	// longitude
	Lng float64 `json:"lng"`
}

// Long defines model for long.
type Long int64

// PageInfo defines model for pageInfo.
type PageInfo struct {
	BeginCursor *int  `json:"begin_cursor,omitempty"`
	EndCursor   *int  `json:"end_cursor,omitempty"`
	HasNext     *bool `json:"has_next,omitempty"`
	HasPrevious *bool `json:"has_previous,omitempty"`
}

// Restaurant
type Restaurant struct {
	Id       Long     `json:"id"`
	Location Location `json:"location"`
	Name     string   `json:"name"`
}

// Update private comments for a restaurant
type UpdateCommentRequest struct {
	Body *string `json:"body,omitempty"`
}

// Reperesents user
type User struct {
	Id   Long   `json:"id"`
	Name string `json:"name"`
}

// PageQuery defines model for pageQuery.
type PageQuery Long

// NewCommunityJSONBody defines parameters for NewCommunity.
type NewCommunityJSONBody CreateCommunityRequest

// AddRestaurantToCommunityJSONBody defines parameters for AddRestaurantToCommunity.
type AddRestaurantToCommunityJSONBody AddRestaurantRequest

// NewCommunityJSONBody defines parameters for NewCommunity.
type NewCommunityJSONBody UpdateCommentRequest

// NewUserJSONBody defines parameters for NewUser.
type NewUserJSONBody CreateUserRequest

// ListUserCommunitiesParams defines parameters for ListUserCommunities.
type ListUserCommunitiesParams struct {
	After *PageQuery `json:"after,omitempty"`
}

// NewCommunityJSONRequestBody defines body for NewCommunity for application/json ContentType.
type NewCommunityJSONRequestBody NewCommunityJSONBody

// AddRestaurantToCommunityJSONRequestBody defines body for AddRestaurantToCommunity for application/json ContentType.
type AddRestaurantToCommunityJSONRequestBody AddRestaurantToCommunityJSONBody

// NewCommunityJSONRequestBody defines body for NewCommunity for application/json ContentType.
type NewCommunityJSONRequestBody NewCommunityJSONBody

// NewUserJSONRequestBody defines body for NewUser for application/json ContentType.
type NewUserJSONRequestBody NewUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new community
	// (POST /community)
	NewCommunity(ctx echo.Context) error
	// Get a community by id
	// (GET /community/{id})
	GetCommunityById(ctx echo.Context, id int) error
	// List restaurants in a community
	// (GET /community/{id}/restaurants)
	ListCommunityRestaurants(ctx echo.Context, id int) error
	// Add a restaurant to a community
	// (POST /community/{id}/restaurants)
	AddRestaurantToCommunity(ctx echo.Context, id int) error
	// Remove a restrant from the specified community
	// (DELETE /community/{id}/restaurants/{restaurant_id})
	RemoveRestaurantFromCommunity(ctx echo.Context, id int64, restaurantId int64) error
	// Get private comments for a restaurant
	// (GET /community/{id}/restaurants/{restaurant_id}/comments)
	GetRestaurantComment(ctx echo.Context, id int, restaurantId int) error
	// Create a new community
	// (PUT /community/{id}/restaurants/{restaurant_id}/comments)
	NewCommunity(ctx echo.Context, id int, restaurantId int) error
	// List users in a community
	// (GET /community/{id}/users)
	ListUsersOfCommunity(ctx echo.Context, id int) error
	// Create a new user
	// (POST /user)
	NewUser(ctx echo.Context) error
	// Get communities where the specified user joins
	// (GET /user/{id}/communities)
	ListUserCommunities(ctx echo.Context, id Long, params ListUserCommunitiesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// NewCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) NewCommunity(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NewCommunity(ctx)
	return err
}

// GetCommunityById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCommunityById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCommunityById(ctx, id)
	return err
}

// ListCommunityRestaurants converts echo context to params.
func (w *ServerInterfaceWrapper) ListCommunityRestaurants(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCommunityRestaurants(ctx, id)
	return err
}

// AddRestaurantToCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) AddRestaurantToCommunity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddRestaurantToCommunity(ctx, id)
	return err
}

// RemoveRestaurantFromCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveRestaurantFromCommunity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "restaurant_id" -------------
	var restaurantId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, ctx.Param("restaurant_id"), &restaurantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurant_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveRestaurantFromCommunity(ctx, id, restaurantId)
	return err
}

// GetRestaurantComment converts echo context to params.
func (w *ServerInterfaceWrapper) GetRestaurantComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "restaurant_id" -------------
	var restaurantId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, ctx.Param("restaurant_id"), &restaurantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurant_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRestaurantComment(ctx, id, restaurantId)
	return err
}

// NewCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) NewCommunity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "restaurant_id" -------------
	var restaurantId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, ctx.Param("restaurant_id"), &restaurantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurant_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NewCommunity(ctx, id, restaurantId)
	return err
}

// ListUsersOfCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsersOfCommunity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsersOfCommunity(ctx, id)
	return err
}

// NewUser converts echo context to params.
func (w *ServerInterfaceWrapper) NewUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NewUser(ctx)
	return err
}

// ListUserCommunities converts echo context to params.
func (w *ServerInterfaceWrapper) ListUserCommunities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserCommunitiesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUserCommunities(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/community", wrapper.NewCommunity)
	router.GET(baseURL+"/community/:id", wrapper.GetCommunityById)
	router.GET(baseURL+"/community/:id/restaurants", wrapper.ListCommunityRestaurants)
	router.POST(baseURL+"/community/:id/restaurants", wrapper.AddRestaurantToCommunity)
	router.DELETE(baseURL+"/community/:id/restaurants/:restaurant_id", wrapper.RemoveRestaurantFromCommunity)
	router.GET(baseURL+"/community/:id/restaurants/:restaurant_id/comments", wrapper.GetRestaurantComment)
	router.PUT(baseURL+"/community/:id/restaurants/:restaurant_id/comments", wrapper.NewCommunity)
	router.GET(baseURL+"/community/:id/users", wrapper.ListUsersOfCommunity)
	router.POST(baseURL+"/user", wrapper.NewUser)
	router.GET(baseURL+"/user/:id/communities", wrapper.ListUserCommunities)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RZzY7bNhB+FYLtUWvLu2vH9i0x0EXQImkX2RyaGAvaGttMJVIhqU0MQ4fk1nMfoA+3",
	"L1KQ1L8pW0nsIrkk1no4M5xv5psZeYeXPIo5A6Yknu5wTASJQIHIntbwRwJiqx8ow1P83jx5mJEI8BST",
	"lQKBPSyXG4iIlvpZwApP8U/9Um/ffiv7IWdrnKZpLm9skCC4BalIIghTt/A+Aan03wOQS0FjRbm2+zQI",
	"EEGiEESKI4KWPIoSRpX2KBY8BqEoGK2l5D0NOvrlYQHvEyogwNM3DQ1zD6ttrK/MF+9gqXDqYZKozXO2",
	"4iZSNeuK/wXMfLBnpBJUm/DwA7AAxDGHtObXVrLpVqbAy2y0+fW6sAMsifTBG87XIWAPP41j+z/jbBvx",
	"RFaUlI7q0AJzIPG7oA9EAcoEJFpxUYNmD4sFD7bOYBTwdcbI+xpgPZzEAVEQ3BPHfe7sd0j/iwgLkKKR",
	"Dg98JJEO1BRf+peDC39wceW/8sfTK3/q+39iD6+4iLRCrE9eZKcad0wd8JRJu+fLDd9yReSGHsjs2glH",
	"ULtHJeRLkqs5LJ/JpXnd7xz3rCYpDXKKcOXnUgBRMMtvWKn5FtE7CaIiVY9H7lGJ1+Onz4+f/n38/Pfj",
	"53+wd4YaNCYLPa4rVkNbOLbDoc6XwdWw9+TJaHI5nAyuR6Pr0RMPh2yNp1fDnn95PR5fDsfj8XAwHKVN",
	"7ENXAodEUZUEUEtJnixMkUfkI400AQzGvocjyuzThXnM3GZJtNC3zNzY08/ZuoOBSU3/ZF99I4j6Ltai",
	"O4DWlcIgZWp0XaJJmYK1dVo3KTcNL2BN2f0yEZKLGhID33dpAhY4pScTl/SGyHsGH1VNVokECuEF5yEQ",
	"lgvHAh6o5tvjB1y8UWHYPYxu29n3++KDihUX7JaoZ7a1tA4DlrJRfKpO5Ip2Ii1FNOMcgwBprBmJr4/2",
	"l/LWF1CslqVZRSiqjPKitRjiEtLex+8Ner72hsfASEzxFF/1/J6v70XUxlypX2tYMbeI6EsbHJ8HeIpf",
	"wIdZpWMJi9yzLNxLzlQ2S5A4DqlNgP47aXOt2/DY0jXSemB0OdlaiTmTFpNL3z+dF8UtjeF6drz81cAk",
	"kygiembGM+MzIojBh1pLV2QtNYpl0Ob6ZKm+v6NBqp1ZgyPcN6CKk8+2zwMDVzm4v8mGdQ1hOaubjKlH",
	"qjq4NwkunX83YbwBVR320WKLzGW6RbFfEoJsjehvVKpKbpUHvsfIkjB8uTLOHIpx0RdTb9e6HVnSUhDJ",
	"Y5BVaLXkSyIE2boIdN4FVx30Cl1LRFljqcsRrvS3uW75ThJ6Wt0kX/EqIZ0Jw9OznHMb7sRx1/vd6gVH",
	"s8ypeuCPb9POwB+urf6utpul1p8QFOxDdQsRf4BS+S+CRyfF6+jcqIvCoba+Xn6bhXlHjPLEST187RZR",
	"aMUTFrxlRYwQFwY/QRKmEJWIcV1KayoVCAg8/b3aAAp1ifGV+SxjWNIVhaBCpQEHe1Y7QShrCJbh6L1l",
	"jSSyGGZ5ZLJoJXjUZuk0OdXPZ71DrbHUnw2SZyGAb82fk3eFTiyev9ZJW/j5x0pBPRh02QKqgwLkPSQ5",
	"Psf+KFlz+j7kXMQ69aHBSYfELFdPM2lDG+PoVe7wbHinJV6u/oeZ4uxzodlb92fCIgadeCRT8tVz4HGe",
	"cc2Kxsf2KVGDlAGcr++t6+qd3d7Pt6lWX1qeoXC+CWuSqM19/obg2EtQu0N0g9aWYXCoOLPXJi2Y2XrM",
	"wc3cPViVs4rsCYqyy+9EbqnSdL/83eyENV2HsBGizs0/27qPV67Xdbucd13hKy6jDxsQ0Oj0Gn/0jlMm",
	"HfmRpv8FAAD//wqxKjKrHAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
