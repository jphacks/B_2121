// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	TokenScopes = "token.Scopes"
)

// Defines values for AuthVendor.
const (
	AuthVendorAnonymous AuthVendor = "Anonymous"

	AuthVendorApple AuthVendor = "Apple"

	AuthVendorGoogle AuthVendor = "Google"
)

// Add a restaurant to a community
type AddRestaurantRequest struct {
	RestaurantId Long `json:"restaurant_id"`
}

// AuthInfo defines model for authInfo.
type AuthInfo struct {
	Token  string     `json:"token"`
	Vendor AuthVendor `json:"vendor"`
}

// AuthVendor defines model for authVendor.
type AuthVendor string

// Private comments for a restaurant
type Comment struct {
	Body         *string `json:"body,omitempty"`
	CommunityId  *Long   `json:"community_id,omitempty"`
	RestaurantId *Long   `json:"restaurant_id,omitempty"`

	// Updated date and time
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Goyotashi community
type Community struct {
	Description   string   `json:"description"`
	Id            Long     `json:"id"`
	ImageUrls     []string `json:"imageUrls"`
	Location      Location `json:"location"`
	Name          string   `json:"name"`
	NumRestaurant int      `json:"num_restaurant"`
	NumUser       int      `json:"num_user"`
}

// CreateCommunityRequest defines model for createCommunityRequest.
type CreateCommunityRequest struct {
	Description string   `json:"description"`
	Location    Location `json:"location"`
	Name        string   `json:"name"`
}

// CreateUserRequest defines model for createUserRequest.
type CreateUserRequest struct {
	Name   string     `json:"name"`
	Vendor AuthVendor `json:"vendor"`
}

// CreateUserResponse defines model for createUserResponse.
type CreateUserResponse struct {
	AuthInfo AuthInfo `json:"auth_info"`

	// Reperesents user
	User User `json:"user"`
}

// JoinCommunityRequest defines model for joinCommunityRequest.
type JoinCommunityRequest struct {
	CommunityId Long `json:"community_id"`
}

// ListCommunityRestaurantsResponse defines model for listCommunityRestaurantsResponse.
type ListCommunityRestaurantsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/pageInfo)
	PageInfo `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Restaurants *[]Restaurant `json:"restaurants,omitempty"`
}

// ListCommunityUsersResponse defines model for listCommunityUsersResponse.
type ListCommunityUsersResponse struct {
	// Embedded struct due to allOf(#/components/schemas/user)
	User `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Users *[]User `json:"users,omitempty"`
}

// ListUserBookmarkResponse defines model for listUserBookmarkResponse.
type ListUserBookmarkResponse struct {
	// Embedded struct due to allOf(#/components/schemas/pageInfo)
	PageInfo `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Communities *[]Community `json:"communities,omitempty"`
}

// ListUserCommunityResponse defines model for listUserCommunityResponse.
type ListUserCommunityResponse struct {
	// Embedded fields due to inline allOf schema
	Communities *[]Community `json:"communities,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/pageInfo)
	PageInfo `yaml:",inline"`
}

// Location defines model for location.
type Location struct {
	// latitude
	Lat float64 `json:"lat"`

	// longitude
	Lng float64 `json:"lng"`
}

// Long defines model for long.
type Long int64

// PageInfo defines model for pageInfo.
type PageInfo struct {
	BeginCursor *int  `json:"begin_cursor,omitempty"`
	EndCursor   *int  `json:"end_cursor,omitempty"`
	HasNext     *bool `json:"has_next,omitempty"`
	HasPrevious *bool `json:"has_previous,omitempty"`
}

// Restaurant
type Restaurant struct {
	Id       Long     `json:"id"`
	ImageUrl *string  `json:"image_url,omitempty"`
	Location Location `json:"location"`
	Name     string   `json:"name"`
}

// SearchCommunityResponse defines model for searchCommunityResponse.
type SearchCommunityResponse struct {
	// Embedded struct due to allOf(#/components/schemas/pageInfo)
	PageInfo `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Communities *[]Community `json:"communities,omitempty"`
}

// SearchRestaurantResponse defines model for searchRestaurantResponse.
type SearchRestaurantResponse struct {
	// Embedded struct due to allOf(#/components/schemas/pageInfo)
	PageInfo `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Restaurants *[]Restaurant `json:"restaurants,omitempty"`
}

// Update private comments for a restaurant
type UpdateCommentRequest struct {
	Body *string `json:"body,omitempty"`
}

// UploadImageProfileResponse defines model for uploadImageProfileResponse.
type UploadImageProfileResponse struct {
	ImageUrl string `json:"imageUrl"`
}

// Reperesents user
type User struct {
	Id              Long    `json:"id"`
	Name            string  `json:"name"`
	ProfileImageUrl *string `json:"profile_image_url,omitempty"`
}

// UserDetail defines model for userDetail.
type UserDetail struct {
	// Embedded struct due to allOf(#/components/schemas/user)
	User `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	BookmarkCount  int `json:"bookmark_count"`
	CommunityCount int `json:"community_count"`
}

// PageQuery defines model for pageQuery.
type PageQuery Long

// NewCommunityJSONBody defines parameters for NewCommunity.
type NewCommunityJSONBody CreateCommunityRequest

// SearchCommunitiesParams defines parameters for SearchCommunities.
type SearchCommunitiesParams struct {
	After     *PageQuery `json:"after,omitempty"`
	Keyword   string     `json:"keyword"`
	CenterLat *float64   `json:"center_lat,omitempty"`
	CenterLng *float64   `json:"center_lng,omitempty"`
}

// ListCommunityRestaurantsParams defines parameters for ListCommunityRestaurants.
type ListCommunityRestaurantsParams struct {
	After *PageQuery `json:"after,omitempty"`
}

// AddRestaurantToCommunityJSONBody defines parameters for AddRestaurantToCommunity.
type AddRestaurantToCommunityJSONBody AddRestaurantRequest

// UpdateRestaurantCommentJSONBody defines parameters for UpdateRestaurantComment.
type UpdateRestaurantCommentJSONBody UpdateCommentRequest

// ListUsersOfCommunityParams defines parameters for ListUsersOfCommunity.
type ListUsersOfCommunityParams struct {
	After *PageQuery `json:"after,omitempty"`
}

// SearchRestaurantsParams defines parameters for SearchRestaurants.
type SearchRestaurantsParams struct {
	After     *PageQuery `json:"after,omitempty"`
	Keyword   string     `json:"keyword"`
	CenterLat *float64   `json:"center_lat,omitempty"`
	CenterLng *float64   `json:"center_lng,omitempty"`
}

// NewUserJSONBody defines parameters for NewUser.
type NewUserJSONBody CreateUserRequest

// PostUserMeCommunitiesJSONBody defines parameters for PostUserMeCommunities.
type PostUserMeCommunitiesJSONBody JoinCommunityRequest

// PostUserIdBookmarkJSONBody defines parameters for PostUserIdBookmark.
type PostUserIdBookmarkJSONBody struct {
	CommunityId Long `json:"community_id"`
}

// ListUserCommunitiesParams defines parameters for ListUserCommunities.
type ListUserCommunitiesParams struct {
	After *PageQuery `json:"after,omitempty"`
}

// NewCommunityJSONRequestBody defines body for NewCommunity for application/json ContentType.
type NewCommunityJSONRequestBody NewCommunityJSONBody

// AddRestaurantToCommunityJSONRequestBody defines body for AddRestaurantToCommunity for application/json ContentType.
type AddRestaurantToCommunityJSONRequestBody AddRestaurantToCommunityJSONBody

// UpdateRestaurantCommentJSONRequestBody defines body for UpdateRestaurantComment for application/json ContentType.
type UpdateRestaurantCommentJSONRequestBody UpdateRestaurantCommentJSONBody

// NewUserJSONRequestBody defines body for NewUser for application/json ContentType.
type NewUserJSONRequestBody NewUserJSONBody

// PostUserMeCommunitiesJSONRequestBody defines body for PostUserMeCommunities for application/json ContentType.
type PostUserMeCommunitiesJSONRequestBody PostUserMeCommunitiesJSONBody

// PostUserIdBookmarkJSONRequestBody defines body for PostUserIdBookmark for application/json ContentType.
type PostUserIdBookmarkJSONRequestBody PostUserIdBookmarkJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new community
	// (POST /community)
	NewCommunity(ctx echo.Context) error
	// Search communities using keyword and location
	// (GET /community/search)
	SearchCommunities(ctx echo.Context, params SearchCommunitiesParams) error
	// Get a community by id
	// (GET /community/{id})
	GetCommunityById(ctx echo.Context, id int) error
	// List restaurants in a community
	// (GET /community/{id}/restaurants)
	ListCommunityRestaurants(ctx echo.Context, id int, params ListCommunityRestaurantsParams) error
	// Add a restaurant to a community
	// (POST /community/{id}/restaurants)
	AddRestaurantToCommunity(ctx echo.Context, id int) error
	// Remove a restrant from the specified community
	// (DELETE /community/{id}/restaurants/{restaurant_id})
	RemoveRestaurantFromCommunity(ctx echo.Context, id int64, restaurantId int64) error
	// Get private comments for a restaurant
	// (GET /community/{id}/restaurants/{restaurant_id}/comments)
	GetRestaurantComment(ctx echo.Context, id int, restaurantId int) error
	// Update comment of the restaurant
	// (PUT /community/{id}/restaurants/{restaurant_id}/comments)
	UpdateRestaurantComment(ctx echo.Context, id int, restaurantId int) error
	// List users in a community
	// (GET /community/{id}/users)
	ListUsersOfCommunity(ctx echo.Context, id int, params ListUsersOfCommunityParams) error
	// Search restaurants using keyword and location
	// (GET /restaurant/search)
	SearchRestaurants(ctx echo.Context, params SearchRestaurantsParams) error
	// Get information about the speicifed restaurant.
	// (GET /restaurant/{id})
	GetRestaurantId(ctx echo.Context, id int64) error
	// Create a new user
	// (POST /user)
	NewUser(ctx echo.Context) error
	// Get my profile in detail
	// (GET /user/me)
	GetMyProfile(ctx echo.Context) error
	// Join a community
	// (POST /user/me/communities)
	PostUserMeCommunities(ctx echo.Context) error

	// (POST /user/profile)
	UploadProfileImage(ctx echo.Context) error
	// Get bookmarking list of the specified user
	// (GET /user/{id}/bookmark)
	GetUserIdBookmark(ctx echo.Context, id Long) error
	// Create a new bookmark
	// (POST /user/{id}/bookmark)
	PostUserIdBookmark(ctx echo.Context, id Long) error
	// Delete bookmark from the specified user
	// (DELETE /user/{id}/bookmark/{community_id})
	DeleteUserIdBookmarkCommunityId(ctx echo.Context, id Long, communityId Long) error
	// Get communities where the specified user joins
	// (GET /user/{id}/communities)
	ListUserCommunities(ctx echo.Context, id Long, params ListUserCommunitiesParams) error
	// Leave a community
	// (DELETE /user/{id}/communities/{community_id})
	DeleteUserIdCommunitiesCommunityId(ctx echo.Context, id Long, communityId Long) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// NewCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) NewCommunity(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NewCommunity(ctx)
	return err
}

// SearchCommunities converts echo context to params.
func (w *ServerInterfaceWrapper) SearchCommunities(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchCommunitiesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Required query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, true, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// ------------- Optional query parameter "center_lat" -------------

	err = runtime.BindQueryParameter("form", true, false, "center_lat", ctx.QueryParams(), &params.CenterLat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter center_lat: %s", err))
	}

	// ------------- Optional query parameter "center_lng" -------------

	err = runtime.BindQueryParameter("form", true, false, "center_lng", ctx.QueryParams(), &params.CenterLng)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter center_lng: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchCommunities(ctx, params)
	return err
}

// GetCommunityById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCommunityById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCommunityById(ctx, id)
	return err
}

// ListCommunityRestaurants converts echo context to params.
func (w *ServerInterfaceWrapper) ListCommunityRestaurants(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCommunityRestaurantsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCommunityRestaurants(ctx, id, params)
	return err
}

// AddRestaurantToCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) AddRestaurantToCommunity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddRestaurantToCommunity(ctx, id)
	return err
}

// RemoveRestaurantFromCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveRestaurantFromCommunity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "restaurant_id" -------------
	var restaurantId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, ctx.Param("restaurant_id"), &restaurantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurant_id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveRestaurantFromCommunity(ctx, id, restaurantId)
	return err
}

// GetRestaurantComment converts echo context to params.
func (w *ServerInterfaceWrapper) GetRestaurantComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "restaurant_id" -------------
	var restaurantId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, ctx.Param("restaurant_id"), &restaurantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurant_id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRestaurantComment(ctx, id, restaurantId)
	return err
}

// UpdateRestaurantComment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRestaurantComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "restaurant_id" -------------
	var restaurantId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, ctx.Param("restaurant_id"), &restaurantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurant_id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRestaurantComment(ctx, id, restaurantId)
	return err
}

// ListUsersOfCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsersOfCommunity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersOfCommunityParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsersOfCommunity(ctx, id, params)
	return err
}

// SearchRestaurants converts echo context to params.
func (w *ServerInterfaceWrapper) SearchRestaurants(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchRestaurantsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Required query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, true, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// ------------- Optional query parameter "center_lat" -------------

	err = runtime.BindQueryParameter("form", true, false, "center_lat", ctx.QueryParams(), &params.CenterLat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter center_lat: %s", err))
	}

	// ------------- Optional query parameter "center_lng" -------------

	err = runtime.BindQueryParameter("form", true, false, "center_lng", ctx.QueryParams(), &params.CenterLng)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter center_lng: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchRestaurants(ctx, params)
	return err
}

// GetRestaurantId converts echo context to params.
func (w *ServerInterfaceWrapper) GetRestaurantId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRestaurantId(ctx, id)
	return err
}

// NewUser converts echo context to params.
func (w *ServerInterfaceWrapper) NewUser(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NewUser(ctx)
	return err
}

// GetMyProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyProfile(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMyProfile(ctx)
	return err
}

// PostUserMeCommunities converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserMeCommunities(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserMeCommunities(ctx)
	return err
}

// UploadProfileImage converts echo context to params.
func (w *ServerInterfaceWrapper) UploadProfileImage(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadProfileImage(ctx)
	return err
}

// GetUserIdBookmark converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserIdBookmark(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserIdBookmark(ctx, id)
	return err
}

// PostUserIdBookmark converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserIdBookmark(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserIdBookmark(ctx, id)
	return err
}

// DeleteUserIdBookmarkCommunityId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserIdBookmarkCommunityId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "community_id" -------------
	var communityId Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "community_id", runtime.ParamLocationPath, ctx.Param("community_id"), &communityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter community_id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUserIdBookmarkCommunityId(ctx, id, communityId)
	return err
}

// ListUserCommunities converts echo context to params.
func (w *ServerInterfaceWrapper) ListUserCommunities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserCommunitiesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUserCommunities(ctx, id, params)
	return err
}

// DeleteUserIdCommunitiesCommunityId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserIdCommunitiesCommunityId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "community_id" -------------
	var communityId Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "community_id", runtime.ParamLocationPath, ctx.Param("community_id"), &communityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter community_id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUserIdCommunitiesCommunityId(ctx, id, communityId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/community", wrapper.NewCommunity)
	router.GET(baseURL+"/community/search", wrapper.SearchCommunities)
	router.GET(baseURL+"/community/:id", wrapper.GetCommunityById)
	router.GET(baseURL+"/community/:id/restaurants", wrapper.ListCommunityRestaurants)
	router.POST(baseURL+"/community/:id/restaurants", wrapper.AddRestaurantToCommunity)
	router.DELETE(baseURL+"/community/:id/restaurants/:restaurant_id", wrapper.RemoveRestaurantFromCommunity)
	router.GET(baseURL+"/community/:id/restaurants/:restaurant_id/comments", wrapper.GetRestaurantComment)
	router.PUT(baseURL+"/community/:id/restaurants/:restaurant_id/comments", wrapper.UpdateRestaurantComment)
	router.GET(baseURL+"/community/:id/users", wrapper.ListUsersOfCommunity)
	router.GET(baseURL+"/restaurant/search", wrapper.SearchRestaurants)
	router.GET(baseURL+"/restaurant/:id", wrapper.GetRestaurantId)
	router.POST(baseURL+"/user", wrapper.NewUser)
	router.GET(baseURL+"/user/me", wrapper.GetMyProfile)
	router.POST(baseURL+"/user/me/communities", wrapper.PostUserMeCommunities)
	router.POST(baseURL+"/user/profile", wrapper.UploadProfileImage)
	router.GET(baseURL+"/user/:id/bookmark", wrapper.GetUserIdBookmark)
	router.POST(baseURL+"/user/:id/bookmark", wrapper.PostUserIdBookmark)
	router.DELETE(baseURL+"/user/:id/bookmark/:community_id", wrapper.DeleteUserIdBookmarkCommunityId)
	router.GET(baseURL+"/user/:id/communities", wrapper.ListUserCommunities)
	router.DELETE(baseURL+"/user/:id/communities/:community_id", wrapper.DeleteUserIdCommunitiesCommunityId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
