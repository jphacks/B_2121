// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	TokenScopes = "token.Scopes"
)

// Defines values for AuthVendor.
const (
	AuthVendorAnonymous AuthVendor = "Anonymous"

	AuthVendorApple AuthVendor = "Apple"

	AuthVendorGoogle AuthVendor = "Google"
)

// Add a restaurant to a community
type AddRestaurantRequest struct {
	RestaurantId Long `json:"restaurant_id"`
}

// AuthInfo defines model for authInfo.
type AuthInfo struct {
	Token  string     `json:"token"`
	Vendor AuthVendor `json:"vendor"`
}

// AuthVendor defines model for authVendor.
type AuthVendor string

// Private comments for a restaurant
type Comment struct {
	Body         *string `json:"body,omitempty"`
	CommunityId  *Long   `json:"community_id,omitempty"`
	RestaurantId *Long   `json:"restaurant_id,omitempty"`

	// Updated date and time
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Goyotashi community
type Community struct {
	Description *string   `json:"description,omitempty"`
	Id          Long      `json:"id"`
	Location    *Location `json:"location,omitempty"`
	Name        string    `json:"name"`
}

// CommunityDetail defines model for community_detail.
type CommunityDetail struct {
	// Embedded struct due to allOf(#/components/schemas/community)
	Community `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	NumRestaurant *int `json:"num_restaurant,omitempty"`
	UserCount     int  `json:"user_count"`
}

// CreateCommunityRequest defines model for createCommunityRequest.
type CreateCommunityRequest map[string]interface{}

// CreateUserRequest defines model for createUserRequest.
type CreateUserRequest struct {
	Name   string     `json:"name"`
	Vendor AuthVendor `json:"vendor"`
}

// CreateUserResponse defines model for createUserResponse.
type CreateUserResponse struct {
	AuthInfo AuthInfo `json:"auth_info"`

	// Reperesents user
	User User `json:"user"`
}

// ListCommunityUsersResponse defines model for listCommunityUsersResponse.
type ListCommunityUsersResponse struct {
	// Embedded struct due to allOf(#/components/schemas/user)
	User `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Users *[]User `json:"users,omitempty"`
}

// ListUserCommunityResponse defines model for listUserCommunityResponse.
type ListUserCommunityResponse struct {
	// Embedded fields due to inline allOf schema
	Communities *[]Community `json:"communities,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/pageInfo)
	PageInfo `yaml:",inline"`
}

// Location defines model for location.
type Location struct {
	// latitude
	Lat float64 `json:"lat"`

	// longitude
	Lng float64 `json:"lng"`
}

// Long defines model for long.
type Long int64

// PageInfo defines model for pageInfo.
type PageInfo struct {
	BeginCursor *int  `json:"begin_cursor,omitempty"`
	EndCursor   *int  `json:"end_cursor,omitempty"`
	HasNext     *bool `json:"has_next,omitempty"`
	HasPrevious *bool `json:"has_previous,omitempty"`
}

// Restaurant
type Restaurant struct {
	Id       Long     `json:"id"`
	ImageUrl *string  `json:"image_url,omitempty"`
	Location Location `json:"location"`
	Name     string   `json:"name"`
}

// SearchCommunityResponse defines model for searchCommunityResponse.
type SearchCommunityResponse struct {
	// Embedded struct due to allOf(#/components/schemas/pageInfo)
	PageInfo `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Restaurants *[]Community `json:"restaurants,omitempty"`
}

// Update private comments for a restaurant
type UpdateCommentRequest struct {
	Body *string `json:"body,omitempty"`
}

// UploadImageProfileResponse defines model for uploadImageProfileResponse.
type UploadImageProfileResponse struct {
	ImageUrl string `json:"imageUrl"`
}

// Reperesents user
type User struct {
	Id              Long    `json:"id"`
	Name            string  `json:"name"`
	ProfileImageUrl *string `json:"profile_image_url,omitempty"`
}

// UserDetail defines model for userDetail.
type UserDetail struct {
	// Embedded struct due to allOf(#/components/schemas/user)
	User `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	BookmarkCount  int `json:"bookmark_count"`
	CommunityCount int `json:"community_count"`
}

// PageQuery defines model for pageQuery.
type PageQuery Long

// NewCommunityJSONBody defines parameters for NewCommunity.
type NewCommunityJSONBody CreateCommunityRequest

// SearchCommunitiesParams defines parameters for SearchCommunities.
type SearchCommunitiesParams struct {
	After   *PageQuery `json:"after,omitempty"`
	Keyword string     `json:"keyword"`
	Center  *Location  `json:"center,omitempty"`
}

// ListCommunityRestaurantsParams defines parameters for ListCommunityRestaurants.
type ListCommunityRestaurantsParams struct {
	After *PageQuery `json:"after,omitempty"`
}

// AddRestaurantToCommunityJSONBody defines parameters for AddRestaurantToCommunity.
type AddRestaurantToCommunityJSONBody AddRestaurantRequest

// UpdateRestaurantCommentJSONBody defines parameters for UpdateRestaurantComment.
type UpdateRestaurantCommentJSONBody UpdateCommentRequest

// ListUsersOfCommunityParams defines parameters for ListUsersOfCommunity.
type ListUsersOfCommunityParams struct {
	After *PageQuery `json:"after,omitempty"`
}

// SearchRestaurantsParams defines parameters for SearchRestaurants.
type SearchRestaurantsParams struct {
	After   *PageQuery `json:"after,omitempty"`
	Keyword string     `json:"keyword"`
	Center  Location   `json:"center"`
}

// NewUserJSONBody defines parameters for NewUser.
type NewUserJSONBody CreateUserRequest

// PostUserIdBookmarkJSONBody defines parameters for PostUserIdBookmark.
type PostUserIdBookmarkJSONBody struct {
	CommunityId Long `json:"community_id"`
}

// ListUserCommunitiesParams defines parameters for ListUserCommunities.
type ListUserCommunitiesParams struct {
	After *PageQuery `json:"after,omitempty"`
}

// NewCommunityJSONRequestBody defines body for NewCommunity for application/json ContentType.
type NewCommunityJSONRequestBody NewCommunityJSONBody

// AddRestaurantToCommunityJSONRequestBody defines body for AddRestaurantToCommunity for application/json ContentType.
type AddRestaurantToCommunityJSONRequestBody AddRestaurantToCommunityJSONBody

// UpdateRestaurantCommentJSONRequestBody defines body for UpdateRestaurantComment for application/json ContentType.
type UpdateRestaurantCommentJSONRequestBody UpdateRestaurantCommentJSONBody

// NewUserJSONRequestBody defines body for NewUser for application/json ContentType.
type NewUserJSONRequestBody NewUserJSONBody

// PostUserIdBookmarkJSONRequestBody defines body for PostUserIdBookmark for application/json ContentType.
type PostUserIdBookmarkJSONRequestBody PostUserIdBookmarkJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new community
	// (POST /community)
	NewCommunity(ctx echo.Context) error
	// Search communities using keyword and location
	// (GET /community/search)
	SearchCommunities(ctx echo.Context, params SearchCommunitiesParams) error
	// Get a community by id
	// (GET /community/{id})
	GetCommunityById(ctx echo.Context, id int) error
	// List restaurants in a community
	// (GET /community/{id}/restaurants)
	ListCommunityRestaurants(ctx echo.Context, id int, params ListCommunityRestaurantsParams) error
	// Add a restaurant to a community
	// (POST /community/{id}/restaurants)
	AddRestaurantToCommunity(ctx echo.Context, id int) error
	// Remove a restrant from the specified community
	// (DELETE /community/{id}/restaurants/{restaurant_id})
	RemoveRestaurantFromCommunity(ctx echo.Context, id int64, restaurantId int64) error
	// Get private comments for a restaurant
	// (GET /community/{id}/restaurants/{restaurant_id}/comments)
	GetRestaurantComment(ctx echo.Context, id int, restaurantId int) error
	// Update comment of the restaurant
	// (PUT /community/{id}/restaurants/{restaurant_id}/comments)
	UpdateRestaurantComment(ctx echo.Context, id int, restaurantId int) error
	// List users in a community
	// (GET /community/{id}/users)
	ListUsersOfCommunity(ctx echo.Context, id int, params ListUsersOfCommunityParams) error
	// Search restaurants using keyword and location
	// (GET /restaurant/search)
	SearchRestaurants(ctx echo.Context, params SearchRestaurantsParams) error
	// Create a new user
	// (POST /user)
	NewUser(ctx echo.Context) error
	// Get my profile in detail
	// (GET /user/me)
	GetMyProfile(ctx echo.Context) error

	// (POST /user/profile)
	UploadProfileImage(ctx echo.Context) error
	// Get bookmarking list of the specified user
	// (GET /user/{id}/bookmark)
	GetUserIdBookmark(ctx echo.Context, id Long) error
	// Create a new bookmark
	// (POST /user/{id}/bookmark)
	PostUserIdBookmark(ctx echo.Context, id Long) error
	// Delete bookmark from the specified user
	// (DELETE /user/{id}/bookmark/{community_id})
	DeleteUserIdBookmarkCommunityId(ctx echo.Context, id Long, communityId Long) error
	// Get communities where the specified user joins
	// (GET /user/{id}/communities)
	ListUserCommunities(ctx echo.Context, id Long, params ListUserCommunitiesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// NewCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) NewCommunity(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NewCommunity(ctx)
	return err
}

// SearchCommunities converts echo context to params.
func (w *ServerInterfaceWrapper) SearchCommunities(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchCommunitiesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Required query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, true, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// ------------- Optional query parameter "center" -------------

	err = runtime.BindQueryParameter("form", true, false, "center", ctx.QueryParams(), &params.Center)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter center: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchCommunities(ctx, params)
	return err
}

// GetCommunityById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCommunityById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCommunityById(ctx, id)
	return err
}

// ListCommunityRestaurants converts echo context to params.
func (w *ServerInterfaceWrapper) ListCommunityRestaurants(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCommunityRestaurantsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCommunityRestaurants(ctx, id, params)
	return err
}

// AddRestaurantToCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) AddRestaurantToCommunity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddRestaurantToCommunity(ctx, id)
	return err
}

// RemoveRestaurantFromCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveRestaurantFromCommunity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "restaurant_id" -------------
	var restaurantId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, ctx.Param("restaurant_id"), &restaurantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurant_id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveRestaurantFromCommunity(ctx, id, restaurantId)
	return err
}

// GetRestaurantComment converts echo context to params.
func (w *ServerInterfaceWrapper) GetRestaurantComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "restaurant_id" -------------
	var restaurantId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, ctx.Param("restaurant_id"), &restaurantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurant_id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRestaurantComment(ctx, id, restaurantId)
	return err
}

// UpdateRestaurantComment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRestaurantComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "restaurant_id" -------------
	var restaurantId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, ctx.Param("restaurant_id"), &restaurantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurant_id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRestaurantComment(ctx, id, restaurantId)
	return err
}

// ListUsersOfCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsersOfCommunity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersOfCommunityParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsersOfCommunity(ctx, id, params)
	return err
}

// SearchRestaurants converts echo context to params.
func (w *ServerInterfaceWrapper) SearchRestaurants(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchRestaurantsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Required query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, true, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// ------------- Required query parameter "center" -------------

	err = runtime.BindQueryParameter("form", true, true, "center", ctx.QueryParams(), &params.Center)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter center: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchRestaurants(ctx, params)
	return err
}

// NewUser converts echo context to params.
func (w *ServerInterfaceWrapper) NewUser(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NewUser(ctx)
	return err
}

// GetMyProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyProfile(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMyProfile(ctx)
	return err
}

// UploadProfileImage converts echo context to params.
func (w *ServerInterfaceWrapper) UploadProfileImage(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadProfileImage(ctx)
	return err
}

// GetUserIdBookmark converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserIdBookmark(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserIdBookmark(ctx, id)
	return err
}

// PostUserIdBookmark converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserIdBookmark(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserIdBookmark(ctx, id)
	return err
}

// DeleteUserIdBookmarkCommunityId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserIdBookmarkCommunityId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "community_id" -------------
	var communityId Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "community_id", runtime.ParamLocationPath, ctx.Param("community_id"), &communityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter community_id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUserIdBookmarkCommunityId(ctx, id, communityId)
	return err
}

// ListUserCommunities converts echo context to params.
func (w *ServerInterfaceWrapper) ListUserCommunities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserCommunitiesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUserCommunities(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/community", wrapper.NewCommunity)
	router.GET(baseURL+"/community/search", wrapper.SearchCommunities)
	router.GET(baseURL+"/community/:id", wrapper.GetCommunityById)
	router.GET(baseURL+"/community/:id/restaurants", wrapper.ListCommunityRestaurants)
	router.POST(baseURL+"/community/:id/restaurants", wrapper.AddRestaurantToCommunity)
	router.DELETE(baseURL+"/community/:id/restaurants/:restaurant_id", wrapper.RemoveRestaurantFromCommunity)
	router.GET(baseURL+"/community/:id/restaurants/:restaurant_id/comments", wrapper.GetRestaurantComment)
	router.PUT(baseURL+"/community/:id/restaurants/:restaurant_id/comments", wrapper.UpdateRestaurantComment)
	router.GET(baseURL+"/community/:id/users", wrapper.ListUsersOfCommunity)
	router.GET(baseURL+"/restaurant/search", wrapper.SearchRestaurants)
	router.POST(baseURL+"/user", wrapper.NewUser)
	router.GET(baseURL+"/user/me", wrapper.GetMyProfile)
	router.POST(baseURL+"/user/profile", wrapper.UploadProfileImage)
	router.GET(baseURL+"/user/:id/bookmark", wrapper.GetUserIdBookmark)
	router.POST(baseURL+"/user/:id/bookmark", wrapper.PostUserIdBookmark)
	router.DELETE(baseURL+"/user/:id/bookmark/:community_id", wrapper.DeleteUserIdBookmarkCommunityId)
	router.GET(baseURL+"/user/:id/communities", wrapper.ListUserCommunities)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"gRgxMGn3vwEAAP///VMW4c0vAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
