// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for AuthVender.
const (
	AuthVenderAnonymous AuthVender = "Anonymous"

	AuthVenderApple AuthVender = "Apple"

	AuthVenderGoogle AuthVender = "Google"
)

// Add a restaurant to a community
type AddRestaurantRequest struct {
	RestaurantId Long `json:"restaurant_id"`
}

// AuthInfo defines model for authInfo.
type AuthInfo struct {
	Token  string     `json:"token"`
	Vender AuthVender `json:"vender"`
}

// AuthVender defines model for authVender.
type AuthVender string

// Private comments for a restaurant
type Comment struct {
	Body         *string `json:"body,omitempty"`
	CommunityId  *Long   `json:"community_id,omitempty"`
	RestaurantId *Long   `json:"restaurant_id,omitempty"`

	// Updated date and time
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Goyotashi community
type Community struct {
	Description *string   `json:"description,omitempty"`
	Id          Long      `json:"id"`
	Location    *Location `json:"location,omitempty"`
	Name        string    `json:"name"`
}

// CreateCommunityRequest defines model for createCommunityRequest.
type CreateCommunityRequest map[string]interface{}

// CreateUserRequest defines model for createUserRequest.
type CreateUserRequest struct {
	Name   string     `json:"name"`
	Vender AuthVender `json:"vender"`
}

// Location defines model for location.
type Location struct {
	// latitude
	Lat float64 `json:"lat"`

	// longitude
	Lng float64 `json:"lng"`
}

// Long defines model for long.
type Long int64

// PageInfo defines model for pageInfo.
type PageInfo struct {
	BeginCursor *int  `json:"begin_cursor,omitempty"`
	EndCursor   *int  `json:"end_cursor,omitempty"`
	HasNext     *bool `json:"has_next,omitempty"`
	HasPrevious *bool `json:"has_previous,omitempty"`
}

// Restaurant
type Restaurant struct {
	Id       Long     `json:"id"`
	Location Location `json:"location"`
	Name     string   `json:"name"`
}

// Update private comments for a restaurant
type UpdateCommentRequest struct {
	Body *string `json:"body,omitempty"`
}

// Reperesents user
type User struct {
	Id   Long   `json:"id"`
	Name string `json:"name"`
}

// PageQuery defines model for pageQuery.
type PageQuery Long

// PostCommunityJSONBody defines parameters for PostCommunity.
type PostCommunityJSONBody CreateCommunityRequest

// PostCommunityIdRestaurantsJSONBody defines parameters for PostCommunityIdRestaurants.
type PostCommunityIdRestaurantsJSONBody AddRestaurantRequest

// PutCommunityIdRestaurantsRestaurantIdCommentsJSONBody defines parameters for PutCommunityIdRestaurantsRestaurantIdComments.
type PutCommunityIdRestaurantsRestaurantIdCommentsJSONBody UpdateCommentRequest

// PostUserJSONBody defines parameters for PostUser.
type PostUserJSONBody CreateUserRequest

// GetUserIdCommunitiesParams defines parameters for GetUserIdCommunities.
type GetUserIdCommunitiesParams struct {
	After *PageQuery `json:"after,omitempty"`
}

// PostCommunityJSONRequestBody defines body for PostCommunity for application/json ContentType.
type PostCommunityJSONRequestBody PostCommunityJSONBody

// PostCommunityIdRestaurantsJSONRequestBody defines body for PostCommunityIdRestaurants for application/json ContentType.
type PostCommunityIdRestaurantsJSONRequestBody PostCommunityIdRestaurantsJSONBody

// PutCommunityIdRestaurantsRestaurantIdCommentsJSONRequestBody defines body for PutCommunityIdRestaurantsRestaurantIdComments for application/json ContentType.
type PutCommunityIdRestaurantsRestaurantIdCommentsJSONRequestBody PutCommunityIdRestaurantsRestaurantIdCommentsJSONBody

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody PostUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new community
	// (POST /community)
	PostCommunity(ctx echo.Context) error
	// Get a community by id
	// (GET /community/{id})
	GetCommunityId(ctx echo.Context, id int) error
	// List restaurants in a community
	// (GET /community/{id}/restaurants)
	GetCommunityIdRestaurants(ctx echo.Context, id int) error
	// Add a restaurant to a community
	// (POST /community/{id}/restaurants)
	PostCommunityIdRestaurants(ctx echo.Context, id int) error
	// Remove a restrant from the specified community
	// (DELETE /community/{id}/restaurants/{restaurant_id})
	DeleteCommunityIdRestaurantsRestaurantId(ctx echo.Context, id int64, restaurantId int64) error
	// Get private comments for a restaurant
	// (GET /community/{id}/restaurants/{restaurant_id}/comments)
	GetCommunityIdRestaurantsRestaurantIdComments(ctx echo.Context, id int, restaurantId int) error
	// Create a new community
	// (PUT /community/{id}/restaurants/{restaurant_id}/comments)
	PutCommunityIdRestaurantsRestaurantIdComments(ctx echo.Context, id int, restaurantId int) error
	// List users in a community
	// (GET /community/{id}/users)
	GetCommunityIdUsers(ctx echo.Context, id int) error
	// Create a new user
	// (POST /user)
	PostUser(ctx echo.Context) error
	// Get communities where the specified user joins
	// (GET /user/{id}/communities)
	GetUserIdCommunities(ctx echo.Context, id Long, params GetUserIdCommunitiesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) PostCommunity(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCommunity(ctx)
	return err
}

// GetCommunityId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCommunityId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCommunityId(ctx, id)
	return err
}

// GetCommunityIdRestaurants converts echo context to params.
func (w *ServerInterfaceWrapper) GetCommunityIdRestaurants(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCommunityIdRestaurants(ctx, id)
	return err
}

// PostCommunityIdRestaurants converts echo context to params.
func (w *ServerInterfaceWrapper) PostCommunityIdRestaurants(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCommunityIdRestaurants(ctx, id)
	return err
}

// DeleteCommunityIdRestaurantsRestaurantId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCommunityIdRestaurantsRestaurantId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "restaurant_id" -------------
	var restaurantId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, ctx.Param("restaurant_id"), &restaurantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurant_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCommunityIdRestaurantsRestaurantId(ctx, id, restaurantId)
	return err
}

// GetCommunityIdRestaurantsRestaurantIdComments converts echo context to params.
func (w *ServerInterfaceWrapper) GetCommunityIdRestaurantsRestaurantIdComments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "restaurant_id" -------------
	var restaurantId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, ctx.Param("restaurant_id"), &restaurantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurant_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCommunityIdRestaurantsRestaurantIdComments(ctx, id, restaurantId)
	return err
}

// PutCommunityIdRestaurantsRestaurantIdComments converts echo context to params.
func (w *ServerInterfaceWrapper) PutCommunityIdRestaurantsRestaurantIdComments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "restaurant_id" -------------
	var restaurantId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, ctx.Param("restaurant_id"), &restaurantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurant_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCommunityIdRestaurantsRestaurantIdComments(ctx, id, restaurantId)
	return err
}

// GetCommunityIdUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetCommunityIdUsers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCommunityIdUsers(ctx, id)
	return err
}

// PostUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUser(ctx)
	return err
}

// GetUserIdCommunities converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserIdCommunities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserIdCommunitiesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserIdCommunities(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/community", wrapper.PostCommunity)
	router.GET(baseURL+"/community/:id", wrapper.GetCommunityId)
	router.GET(baseURL+"/community/:id/restaurants", wrapper.GetCommunityIdRestaurants)
	router.POST(baseURL+"/community/:id/restaurants", wrapper.PostCommunityIdRestaurants)
	router.DELETE(baseURL+"/community/:id/restaurants/:restaurant_id", wrapper.DeleteCommunityIdRestaurantsRestaurantId)
	router.GET(baseURL+"/community/:id/restaurants/:restaurant_id/comments", wrapper.GetCommunityIdRestaurantsRestaurantIdComments)
	router.PUT(baseURL+"/community/:id/restaurants/:restaurant_id/comments", wrapper.PutCommunityIdRestaurantsRestaurantIdComments)
	router.GET(baseURL+"/community/:id/users", wrapper.GetCommunityIdUsers)
	router.POST(baseURL+"/user", wrapper.PostUser)
	router.GET(baseURL+"/user/:id/communities", wrapper.GetUserIdCommunities)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xZzY7bNhB+FYLtUWvLXtuxfUtdYBG0aNpFN4cmxoK2xjZTiVRIahPD0CG59dwH6MPt",
	"ixQk9W9qrSTeYtNLYq2Hw+H3zXwzlA94zaOYM2BK4vkBx0SQCBSI7GkLvyUg9vqBMjzH78yThxmJAM8x",
	"2SgQ2MNyvYOIaKvvBWzwHH/XL/327beyH3K2xWma5vZmDxIE1yAVSQRh6hreJSCV/nsAci1orCjX+z4P",
	"AkSQKAyR4oigNY+ihFGlI4oFj0EoCsZraXlLg45xeVjAu4QKCPD8dcPD0sNqH+sj89VbWCucepgkaveC",
	"bbhBqra74n8CMx/sGqkE1Vt4+A5YAOJUQNrzK2vZDCtz4GV7tMX1qtgHWBLphVecb0PAHn4ex/Z/xtk+",
	"4omsOCkD1dACczDxq6B3RAHKDCTacFGj5oiLFQ/2TjAK+jpz5H0JsR5O4oAoCG6J4zw39juk/0WEBUjR",
	"SMMDH0ikgZrjoT8cXPiDi0v/d386v/Tnvv8H9vCGi0g7xHrlRbaqccbUQU+ZtEexXPE9V0Tu6AOZXVvh",
	"ALU7KiFfk9zNw/aZXZrX/cFxzmqS0iCXCFd+rgUQBYv8hJWabzG9kSAqVnU88ohKvu4/frr/+M/9p7/u",
	"P/2NvUeoQbNl4cd1xCq0RWAHHOp8GVyOe8+eTWbD8WwwmkxGk2ceDtkWzy/HPX84mk6H4+l0Oh6MJ2mT",
	"+9CVwCFRVCUB1FKSJytT5BH5QCMtAIOp7+GIMvt0YR6zsFkSrfQpszCO/HO27bDBrOZ/duy+AaI+i93R",
	"DaANpdiQMjUZlWxSpmBrg9ZNyi3DK9hSdrtOhOSixsTA912egAVO69nMZb0j8pbBB1WzVSKBwnjFeQiE",
	"5caxgDuq9fb0ApduVBT2iKPrdvV9WnpQ2cVFuxXqhW0trcOAlWwUn6sTudBOpJWIJs4xCJBmN2Px5Wh/",
	"rm59hsRqW5pVhKLKOC9aixEuIe15/N6g5+toeAyMxBTP8WXP7/n6XETtzJH6tYYVc8uIPrTh8UWghwIu",
	"1aLSsoSl7ocM7zVnKhsmSByH1GZA/620ydZtemxpG2kdGV1PtlhizqQlZej754uiOKXZuJ4eL38yPMkk",
	"iogemvHCxIwIYvC+1tMV2UpNYwnaUq8s3fcPNEh1MFtw4H0FJdwvAsNWObe/zmZ1zWA5qpuEqeNUndub",
	"+pYunwyIV6Cqsz5a7ZE5TDcM+6UeyI54XldWPEVoSRi+3JhgHgK56Iupd2i9HVnRUhDJU5xVZLXUSyIE",
	"2bsEdNmF2J+pVBW5loiyxqUup7jS35a65Z8Wof+IxfPLnPM+3EnkRsf96heOFllQdehP36ed0D9cXv1D",
	"7XaW2nhCUHBM1o/m7266yo/n0baTQ6SuEIfb+l3z63ZYdqQrz6HUwyO3iUIbnrDgDSvAQ1wYKgVJmEJU",
	"IsZ1XW2pVCAg8PT3agco1PXGN+azjGFNNxSCirAGHOxaHQShrGFYwtF7wxr5dA0Rv4MspUxCbQSP2nY6",
	"T3r188Hv82W9mmGL3MtjiMTXJtbZe0cnrc9f/qQtKv5t5aaeH7rcFarzBOSdJnE1muT/mVbnb2bO+1yn",
	"ZjY467CZJfN55nVo0yp9I+wqRjfG9tudLs3t93iyLCDopDOZky+eJk/rkGviNDG2z5qamYzf/CVA+7x5",
	"Y18CPN59t/ru8xEK56vIJona3eYvGk69S7VXkW7c2jIMHirO7O1LC2m2HnN2s3DbqlKvtXqdG5+hLLv8",
	"3uS2Krful7+/nbGq6xw2MOo8HmTX99O163W9pS67vguohIze70BAYxbQCYDecsqkI0HS9N8AAAD//00J",
	"hW3zHAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
