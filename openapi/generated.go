// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	TokenScopes = "token.Scopes"
)

// Defines values for AuthVendor.
const (
	AuthVendorAnonymous AuthVendor = "Anonymous"

	AuthVendorApple AuthVendor = "Apple"

	AuthVendorGoogle AuthVendor = "Google"
)

// Add a restaurant to a community
type AddRestaurantRequest struct {
	RestaurantId Long `json:"restaurant_id"`
}

// AuthInfo defines model for authInfo.
type AuthInfo struct {
	Token  string     `json:"token"`
	Vendor AuthVendor `json:"vendor"`
}

// AuthVendor defines model for authVendor.
type AuthVendor string

// Private comments for a restaurant
type Comment struct {
	Body         *string `json:"body,omitempty"`
	CommunityId  *Long   `json:"community_id,omitempty"`
	RestaurantId *Long   `json:"restaurant_id,omitempty"`

	// Updated date and time
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Goyotashi community
type Community struct {
	Description   string   `json:"description"`
	Id            Long     `json:"id"`
	ImageUrls     []string `json:"imageUrls"`
	Location      Location `json:"location"`
	Name          string   `json:"name"`
	NumRestaurant int      `json:"num_restaurant"`
	NumUser       int      `json:"num_user"`
}

// CreateCommunityRequest defines model for createCommunityRequest.
type CreateCommunityRequest struct {
	Description string   `json:"description"`
	Location    Location `json:"location"`
	Name        string   `json:"name"`
}

// CreateUserRequest defines model for createUserRequest.
type CreateUserRequest struct {
	Name   string     `json:"name"`
	Vendor AuthVendor `json:"vendor"`
}

// CreateUserResponse defines model for createUserResponse.
type CreateUserResponse struct {
	AuthInfo AuthInfo `json:"auth_info"`

	// Reperesents user
	User User `json:"user"`
}

// GetCommunityIdTokenResponse defines model for getCommunityIdTokenResponse.
type GetCommunityIdTokenResponse struct {
	// Token dulation (seconds)
	ExpiresIn   int    `json:"expires_in"`
	InviteToken string `json:"invite_token"`
}

// GetOtherCommunityResponse defines model for getOtherCommunityResponse.
type GetOtherCommunityResponse struct {
	Communities []Community `json:"communities"`
}

// JoinCommunityRequest defines model for joinCommunityRequest.
type JoinCommunityRequest struct {
	InviteToken string `json:"invite_token"`
}

// ListCommunityRestaurantsResponse defines model for listCommunityRestaurantsResponse.
type ListCommunityRestaurantsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/pageInfo)
	PageInfo `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Restaurants *[]Restaurant `json:"restaurants,omitempty"`
}

// ListCommunityUsersResponse defines model for listCommunityUsersResponse.
type ListCommunityUsersResponse struct {
	// Embedded struct due to allOf(#/components/schemas/user)
	User `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Users *[]User `json:"users,omitempty"`
}

// ListUserBookmarkResponse defines model for listUserBookmarkResponse.
type ListUserBookmarkResponse struct {
	// Embedded struct due to allOf(#/components/schemas/pageInfo)
	PageInfo `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Communities *[]Community `json:"communities,omitempty"`
}

// ListUserCommunityResponse defines model for listUserCommunityResponse.
type ListUserCommunityResponse struct {
	// Embedded fields due to inline allOf schema
	Communities *[]Community `json:"communities,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/pageInfo)
	PageInfo `yaml:",inline"`
}

// Location defines model for location.
type Location struct {
	// latitude
	Lat float64 `json:"lat"`

	// longitude
	Lng float64 `json:"lng"`
}

// Long defines model for long.
type Long int64

// PageInfo defines model for pageInfo.
type PageInfo struct {
	BeginCursor *int  `json:"begin_cursor,omitempty"`
	EndCursor   *int  `json:"end_cursor,omitempty"`
	HasNext     *bool `json:"has_next,omitempty"`
	HasPrevious *bool `json:"has_previous,omitempty"`
}

// PutUserMeRequest defines model for putUserMeRequest.
type PutUserMeRequest struct {
	Name *string `json:"name,omitempty"`
}

// Restaurant
type Restaurant struct {
	Id       Long     `json:"id"`
	ImageUrl *string  `json:"image_url,omitempty"`
	Location Location `json:"location"`
	Name     string   `json:"name"`
}

// SearchCommunityResponse defines model for searchCommunityResponse.
type SearchCommunityResponse struct {
	// Embedded struct due to allOf(#/components/schemas/pageInfo)
	PageInfo `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Communities *[]Community `json:"communities,omitempty"`
}

// SearchRestaurantResponse defines model for searchRestaurantResponse.
type SearchRestaurantResponse struct {
	// Embedded struct due to allOf(#/components/schemas/pageInfo)
	PageInfo `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Restaurants *[]Restaurant `json:"restaurants,omitempty"`
}

// Update private comments for a restaurant
type UpdateCommentRequest struct {
	Body *string `json:"body,omitempty"`
}

// UploadImageProfileResponse defines model for uploadImageProfileResponse.
type UploadImageProfileResponse struct {
	ImageUrl string `json:"imageUrl"`
}

// Reperesents user
type User struct {
	Id              Long    `json:"id"`
	Name            string  `json:"name"`
	ProfileImageUrl *string `json:"profile_image_url,omitempty"`
}

// UserDetail defines model for userDetail.
type UserDetail struct {
	// Embedded struct due to allOf(#/components/schemas/user)
	User `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	BookmarkCount  int `json:"bookmark_count"`
	CommunityCount int `json:"community_count"`
}

// PageQuery defines model for pageQuery.
type PageQuery Long

// NewCommunityJSONBody defines parameters for NewCommunity.
type NewCommunityJSONBody CreateCommunityRequest

// SearchCommunitiesParams defines parameters for SearchCommunities.
type SearchCommunitiesParams struct {
	After     *PageQuery `json:"after,omitempty"`
	Keyword   string     `json:"keyword"`
	CenterLat *float64   `json:"center_lat,omitempty"`
	CenterLng *float64   `json:"center_lng,omitempty"`
}

// ListCommunityRestaurantsParams defines parameters for ListCommunityRestaurants.
type ListCommunityRestaurantsParams struct {
	After *PageQuery `json:"after,omitempty"`
}

// AddRestaurantToCommunityJSONBody defines parameters for AddRestaurantToCommunity.
type AddRestaurantToCommunityJSONBody AddRestaurantRequest

// UpdateRestaurantCommentJSONBody defines parameters for UpdateRestaurantComment.
type UpdateRestaurantCommentJSONBody UpdateCommentRequest

// ListUsersOfCommunityParams defines parameters for ListUsersOfCommunity.
type ListUsersOfCommunityParams struct {
	After *PageQuery `json:"after,omitempty"`
}

// SearchRestaurantsParams defines parameters for SearchRestaurants.
type SearchRestaurantsParams struct {
	After     *PageQuery `json:"after,omitempty"`
	Keyword   string     `json:"keyword"`
	CenterLat *float64   `json:"center_lat,omitempty"`
	CenterLng *float64   `json:"center_lng,omitempty"`
}

// GetRestaurantIdOtherParams defines parameters for GetRestaurantIdOther.
type GetRestaurantIdOtherParams struct {
	CommunityId Long `json:"community_id"`
}

// NewUserJSONBody defines parameters for NewUser.
type NewUserJSONBody CreateUserRequest

// PutUserMeJSONBody defines parameters for PutUserMe.
type PutUserMeJSONBody PutUserMeRequest

// PostUserMeCommunitiesJSONBody defines parameters for PostUserMeCommunities.
type PostUserMeCommunitiesJSONBody JoinCommunityRequest

// PostUserIdBookmarkJSONBody defines parameters for PostUserIdBookmark.
type PostUserIdBookmarkJSONBody struct {
	CommunityId Long `json:"community_id"`
}

// ListUserCommunitiesParams defines parameters for ListUserCommunities.
type ListUserCommunitiesParams struct {
	After *PageQuery `json:"after,omitempty"`
}

// NewCommunityJSONRequestBody defines body for NewCommunity for application/json ContentType.
type NewCommunityJSONRequestBody NewCommunityJSONBody

// AddRestaurantToCommunityJSONRequestBody defines body for AddRestaurantToCommunity for application/json ContentType.
type AddRestaurantToCommunityJSONRequestBody AddRestaurantToCommunityJSONBody

// UpdateRestaurantCommentJSONRequestBody defines body for UpdateRestaurantComment for application/json ContentType.
type UpdateRestaurantCommentJSONRequestBody UpdateRestaurantCommentJSONBody

// NewUserJSONRequestBody defines body for NewUser for application/json ContentType.
type NewUserJSONRequestBody NewUserJSONBody

// PutUserMeJSONRequestBody defines body for PutUserMe for application/json ContentType.
type PutUserMeJSONRequestBody PutUserMeJSONBody

// PostUserMeCommunitiesJSONRequestBody defines body for PostUserMeCommunities for application/json ContentType.
type PostUserMeCommunitiesJSONRequestBody PostUserMeCommunitiesJSONBody

// PostUserIdBookmarkJSONRequestBody defines body for PostUserIdBookmark for application/json ContentType.
type PostUserIdBookmarkJSONRequestBody PostUserIdBookmarkJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new community
	// (POST /community)
	NewCommunity(ctx echo.Context) error
	// Search communities using keyword and location
	// (GET /community/search)
	SearchCommunities(ctx echo.Context, params SearchCommunitiesParams) error
	// Get a community by id
	// (GET /community/{id})
	GetCommunityById(ctx echo.Context, id int) error
	// List restaurants in a community
	// (GET /community/{id}/restaurants)
	ListCommunityRestaurants(ctx echo.Context, id int, params ListCommunityRestaurantsParams) error
	// Add a restaurant to a community
	// (POST /community/{id}/restaurants)
	AddRestaurantToCommunity(ctx echo.Context, id int) error
	// Remove a restrant from the specified community
	// (DELETE /community/{id}/restaurants/{restaurant_id})
	RemoveRestaurantFromCommunity(ctx echo.Context, id int64, restaurantId int64) error
	// Get private comments for a restaurant
	// (GET /community/{id}/restaurants/{restaurant_id}/comments)
	GetRestaurantComment(ctx echo.Context, id int, restaurantId int) error
	// Update comment of the restaurant
	// (PUT /community/{id}/restaurants/{restaurant_id}/comments)
	UpdateRestaurantComment(ctx echo.Context, id int, restaurantId int) error
	// Get an invite token
	// (GET /community/{id}/token)
	GetCommunityIdToken(ctx echo.Context, id int) error
	// List users in a community
	// (GET /community/{id}/users)
	ListUsersOfCommunity(ctx echo.Context, id int, params ListUsersOfCommunityParams) error
	// Search restaurants using keyword and location
	// (GET /restaurant/search)
	SearchRestaurants(ctx echo.Context, params SearchRestaurantsParams) error
	// Get information about the speicifed restaurant.
	// (GET /restaurant/{id})
	GetRestaurantId(ctx echo.Context, id int64) error
	// Get other communities which have the secified in thier lists
	// (GET /restaurant/{id}/other)
	GetRestaurantIdOther(ctx echo.Context, id Long, params GetRestaurantIdOtherParams) error
	// Create a new user
	// (POST /user)
	NewUser(ctx echo.Context) error
	// Get my profile in detail
	// (GET /user/me)
	GetMyProfile(ctx echo.Context) error
	// Update my profile
	// (PUT /user/me)
	PutUserMe(ctx echo.Context) error
	// Join a community
	// (POST /user/me/communities)
	PostUserMeCommunities(ctx echo.Context) error

	// (POST /user/profile)
	UploadProfileImage(ctx echo.Context) error
	// Get bookmarking list of the specified user
	// (GET /user/{id}/bookmark)
	GetUserIdBookmark(ctx echo.Context, id Long) error
	// Create a new bookmark
	// (POST /user/{id}/bookmark)
	PostUserIdBookmark(ctx echo.Context, id Long) error
	// Delete bookmark from the specified user
	// (DELETE /user/{id}/bookmark/{community_id})
	DeleteUserIdBookmarkCommunityId(ctx echo.Context, id Long, communityId Long) error
	// Get communities where the specified user joins
	// (GET /user/{id}/communities)
	ListUserCommunities(ctx echo.Context, id Long, params ListUserCommunitiesParams) error
	// Leave a community
	// (DELETE /user/{id}/communities/{community_id})
	DeleteUserIdCommunitiesCommunityId(ctx echo.Context, id Long, communityId Long) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// NewCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) NewCommunity(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NewCommunity(ctx)
	return err
}

// SearchCommunities converts echo context to params.
func (w *ServerInterfaceWrapper) SearchCommunities(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchCommunitiesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Required query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, true, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// ------------- Optional query parameter "center_lat" -------------

	err = runtime.BindQueryParameter("form", true, false, "center_lat", ctx.QueryParams(), &params.CenterLat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter center_lat: %s", err))
	}

	// ------------- Optional query parameter "center_lng" -------------

	err = runtime.BindQueryParameter("form", true, false, "center_lng", ctx.QueryParams(), &params.CenterLng)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter center_lng: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchCommunities(ctx, params)
	return err
}

// GetCommunityById converts echo context to params.
func (w *ServerInterfaceWrapper) GetCommunityById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCommunityById(ctx, id)
	return err
}

// ListCommunityRestaurants converts echo context to params.
func (w *ServerInterfaceWrapper) ListCommunityRestaurants(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCommunityRestaurantsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCommunityRestaurants(ctx, id, params)
	return err
}

// AddRestaurantToCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) AddRestaurantToCommunity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddRestaurantToCommunity(ctx, id)
	return err
}

// RemoveRestaurantFromCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveRestaurantFromCommunity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "restaurant_id" -------------
	var restaurantId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, ctx.Param("restaurant_id"), &restaurantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurant_id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveRestaurantFromCommunity(ctx, id, restaurantId)
	return err
}

// GetRestaurantComment converts echo context to params.
func (w *ServerInterfaceWrapper) GetRestaurantComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "restaurant_id" -------------
	var restaurantId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, ctx.Param("restaurant_id"), &restaurantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurant_id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRestaurantComment(ctx, id, restaurantId)
	return err
}

// UpdateRestaurantComment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRestaurantComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "restaurant_id" -------------
	var restaurantId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "restaurant_id", runtime.ParamLocationPath, ctx.Param("restaurant_id"), &restaurantId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurant_id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRestaurantComment(ctx, id, restaurantId)
	return err
}

// GetCommunityIdToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetCommunityIdToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCommunityIdToken(ctx, id)
	return err
}

// ListUsersOfCommunity converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsersOfCommunity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersOfCommunityParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsersOfCommunity(ctx, id, params)
	return err
}

// SearchRestaurants converts echo context to params.
func (w *ServerInterfaceWrapper) SearchRestaurants(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchRestaurantsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Required query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, true, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// ------------- Optional query parameter "center_lat" -------------

	err = runtime.BindQueryParameter("form", true, false, "center_lat", ctx.QueryParams(), &params.CenterLat)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter center_lat: %s", err))
	}

	// ------------- Optional query parameter "center_lng" -------------

	err = runtime.BindQueryParameter("form", true, false, "center_lng", ctx.QueryParams(), &params.CenterLng)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter center_lng: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchRestaurants(ctx, params)
	return err
}

// GetRestaurantId converts echo context to params.
func (w *ServerInterfaceWrapper) GetRestaurantId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRestaurantId(ctx, id)
	return err
}

// GetRestaurantIdOther converts echo context to params.
func (w *ServerInterfaceWrapper) GetRestaurantIdOther(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRestaurantIdOtherParams
	// ------------- Required query parameter "community_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "community_id", ctx.QueryParams(), &params.CommunityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter community_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRestaurantIdOther(ctx, id, params)
	return err
}

// NewUser converts echo context to params.
func (w *ServerInterfaceWrapper) NewUser(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NewUser(ctx)
	return err
}

// GetMyProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetMyProfile(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMyProfile(ctx)
	return err
}

// PutUserMe converts echo context to params.
func (w *ServerInterfaceWrapper) PutUserMe(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutUserMe(ctx)
	return err
}

// PostUserMeCommunities converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserMeCommunities(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserMeCommunities(ctx)
	return err
}

// UploadProfileImage converts echo context to params.
func (w *ServerInterfaceWrapper) UploadProfileImage(ctx echo.Context) error {
	var err error

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadProfileImage(ctx)
	return err
}

// GetUserIdBookmark converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserIdBookmark(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserIdBookmark(ctx, id)
	return err
}

// PostUserIdBookmark converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserIdBookmark(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserIdBookmark(ctx, id)
	return err
}

// DeleteUserIdBookmarkCommunityId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserIdBookmarkCommunityId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "community_id" -------------
	var communityId Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "community_id", runtime.ParamLocationPath, ctx.Param("community_id"), &communityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter community_id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUserIdBookmarkCommunityId(ctx, id, communityId)
	return err
}

// ListUserCommunities converts echo context to params.
func (w *ServerInterfaceWrapper) ListUserCommunities(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserCommunitiesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUserCommunities(ctx, id, params)
	return err
}

// DeleteUserIdCommunitiesCommunityId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserIdCommunitiesCommunityId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "community_id" -------------
	var communityId Long

	err = runtime.BindStyledParameterWithLocation("simple", false, "community_id", runtime.ParamLocationPath, ctx.Param("community_id"), &communityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter community_id: %s", err))
	}

	ctx.Set(TokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUserIdCommunitiesCommunityId(ctx, id, communityId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/community", wrapper.NewCommunity)
	router.GET(baseURL+"/community/search", wrapper.SearchCommunities)
	router.GET(baseURL+"/community/:id", wrapper.GetCommunityById)
	router.GET(baseURL+"/community/:id/restaurants", wrapper.ListCommunityRestaurants)
	router.POST(baseURL+"/community/:id/restaurants", wrapper.AddRestaurantToCommunity)
	router.DELETE(baseURL+"/community/:id/restaurants/:restaurant_id", wrapper.RemoveRestaurantFromCommunity)
	router.GET(baseURL+"/community/:id/restaurants/:restaurant_id/comments", wrapper.GetRestaurantComment)
	router.PUT(baseURL+"/community/:id/restaurants/:restaurant_id/comments", wrapper.UpdateRestaurantComment)
	router.GET(baseURL+"/community/:id/token", wrapper.GetCommunityIdToken)
	router.GET(baseURL+"/community/:id/users", wrapper.ListUsersOfCommunity)
	router.GET(baseURL+"/restaurant/search", wrapper.SearchRestaurants)
	router.GET(baseURL+"/restaurant/:id", wrapper.GetRestaurantId)
	router.GET(baseURL+"/restaurant/:id/other", wrapper.GetRestaurantIdOther)
	router.POST(baseURL+"/user", wrapper.NewUser)
	router.GET(baseURL+"/user/me", wrapper.GetMyProfile)
	router.PUT(baseURL+"/user/me", wrapper.PutUserMe)
	router.POST(baseURL+"/user/me/communities", wrapper.PostUserMeCommunities)
	router.POST(baseURL+"/user/profile", wrapper.UploadProfileImage)
	router.GET(baseURL+"/user/:id/bookmark", wrapper.GetUserIdBookmark)
	router.POST(baseURL+"/user/:id/bookmark", wrapper.PostUserIdBookmark)
	router.DELETE(baseURL+"/user/:id/bookmark/:community_id", wrapper.DeleteUserIdBookmarkCommunityId)
	router.GET(baseURL+"/user/:id/communities", wrapper.ListUserCommunities)
	router.DELETE(baseURL+"/user/:id/communities/:community_id", wrapper.DeleteUserIdCommunitiesCommunityId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"c8ZAHDAw7y3/HwAA//9DJrhLFT4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
